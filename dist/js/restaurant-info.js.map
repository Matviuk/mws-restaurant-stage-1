{"version":3,"sources":["restaurant_info.js","app.js","dbhelper.js","idb.js"],"names":["restaurant","map","navigator","serviceWorker","register","scope","then","reg","console","log","catch","error","document","addEventListener","event","fetchRestaurantFromURL","fillBreadcrumb","window","initMap","fetchRestaurantFromURLForMap","self","google","maps","Map","getElementById","zoom","center","latlng","scrollwheel","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","innerHTML","setAttribute","address","photograph","picture","webp1","createElement","webp2","webp3","jpg1","jpg2","jpg3","image","dataset","srcset","media","type","append","src","alt","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","images","querySelectorAll","observer","preloadImage","element","onIntersection","entries","forEach","entry","intersectionRatio","unobserve","target","IntersectionObserver","rootMargin","threshold","observe","Array","from","operatingHours","hours","key","row","day","appendChild","time","reviews","container","title","noReviews","ul","review","createReviewHTML","li","tabindex","hdr","className","date","rating","comments","breadcrumb","url","location","href","replace","results","RegExp","exec","decodeURIComponent","DATABASE_URL","[object Object]","idb","open","upgradeDb","store","createObjectStore","keyPath","createIndex","Promise","resolve","reject","openDatabase","db","transaction","objectStore","getAll","data","length","fetch","response","json","put","e","requestError","get","parseInt","cuisine","fetchRestaurants","restaurants","filter","r","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","Marker","position","urlForRestaurant","animation","Animation","DROP","promisifyRequest","request","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","slice","call","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default"],"mappings":"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","file":"restaurant-info.js","sourcesContent":["let restaurant;\nvar map;\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      fillBreadcrumb();\n    }\n  });\n});\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURLForMap((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      // fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL (for Google map).\n */\nfetchRestaurantFromURLForMap = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n  name.setAttribute('aria-label', `${restaurant.name} restaurant`)\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n  address.setAttribute('aria-label', `Address: ${restaurant.address}`)\n\n  if (restaurant.photograph) {\n    const picture = document.getElementById('restaurant-img');\n    const webp1 = document.createElement('source');\n    const webp2 = document.createElement('source');\n    const webp3 = document.createElement('source');\n    const jpg1 = document.createElement('source');\n    const jpg2 = document.createElement('source');\n    const jpg3 = document.createElement('source');\n    const image = document.createElement('img');\n\n    webp1.dataset.srcset = `/img/${restaurant.photograph}-680.webp`;\n    webp1.media = '(min-width: 471px) and (max-width: 760px), (min-width: 941px) and (max-width: 1520px)';\n    webp1.type = 'image/webp';\n    picture.append(webp1);\n\n    webp2.dataset.srcset = `/img/${restaurant.photograph}-390.webp`;\n    webp2.media = '(max-width: 470px), (min-width: 841px) and (max-width: 940px)';\n    webp2.type = 'image/webp';\n    picture.append(webp2);\n\n    webp3.dataset.srcset = `/img/${restaurant.photograph}-original.webp`;\n    webp3.media = '(min-width: 761px) and (max-width: 840px), (min-width: 1521px)';\n    webp3.type = 'image/webp';\n    picture.append(webp3);\n\n    jpg1.dataset.srcset = `/img/${restaurant.photograph}-680.jpg`;\n    jpg1.media = '(min-width: 471px) and (max-width: 760px), (min-width: 941px) and (max-width: 1520px)';\n    jpg1.type = 'image/jpeg';\n    picture.append(jpg1);\n\n    jpg2.dataset.srcset = `/img/${restaurant.photograph}-390.jpg`;\n    jpg2.media = '(max-width: 470px), (min-width: 841px) and (max-width: 940px)';\n    jpg2.type = 'image/jpeg';\n    picture.append(jpg2);\n\n    jpg3.dataset.srcset = `/img/${restaurant.photograph}-original.jpg`;\n    jpg3.media = '(min-width: 761px) and (max-width: 840px), (min-width: 1521px)';\n    jpg3.type = 'image/jpeg';\n    picture.append(jpg3);\n\n    image.src = `/img/${restaurant.photograph}-15.jpg`;\n    image.dataset.src = `/img/${restaurant.photograph}-original.jpg`;\n    image.alt = `${restaurant.name} restaurant's photo`;\n    picture.append(image);\n  }\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n\n  // Use IntersectionObserver for lazy loading images\n  const images = window.document.querySelectorAll('source, img');\n  const config = {\n    rootMargin: '0px',\n    threshold: 0.1\n  };\n  let observer;\n\n  let preloadImage = (element) => {\n\n    if(element.dataset && element.dataset.src) {\n      element.src = element.dataset.src;\n    }\n\n    if(element.dataset && element.dataset.srcset) {\n      element.srcset = element.dataset.srcset;\n    }\n  }\n\n  let onIntersection = (entries) => {\n    entries.forEach(entry => {\n      if (entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        preloadImage(entry.target);\n      }\n    });\n  }\n\n  if (!('IntersectionObserver' in window)) {\n    Array.from(images).forEach(image => preloadImage(image));\n  } else {\n    observer = new IntersectionObserver(onIntersection, config);\n    images.forEach(image => {\n      observer.observe(image);\n    });\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.tabindex = 0;\n  const hdr = document.createElement('h3');\n  const name = document.createElement('span');\n  name.className = 'review-name';\n  name.innerHTML = review.name;\n  hdr.appendChild(name);\n\n  const date = document.createElement('span');\n  date.innerHTML = review.date;\n  date.setAttribute('class', 'review-date');\n  hdr.appendChild(date);\n  li.appendChild(hdr);\n\n  const rating = document.createElement('p');\n  rating.className = 'review-rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n","if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js', {scope: './'}).then(function(reg) {\r\n    console.log('Registration succeeded. Scope is ' + reg.scope);\r\n  }).catch(function(error) {\r\n    console.log('Registration failed with ' + error);\r\n  });\r\n}","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Create and/or open IDB.\r\n   */\r\n\r\n  static openDatabase() {\r\n    return idb.open(\"RestReview\", 1, function(upgradeDb) {\r\n      let store = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      store.createIndex('cuisine','cuisine_type');\r\n      store.createIndex('neighborhood','neighborhood');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from IDB.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return new Promise((resolve,reject) => {\r\n      DBHelper.openDatabase().then(db => {\r\n        if (!db) return;\r\n\r\n        let tx = db.transaction('restaurants');\r\n        let store = tx.objectStore('restaurants');\r\n\r\n        store.getAll().then(data => {\r\n          if (data && data.length > 0) {\r\n            resolve(data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                data.forEach(restaurant => store.put(restaurant));\r\n              });\r\n              return resolve(data);\r\n            })\r\n            .catch(e => requestError(e, 'Restaurants request from web failed'));\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    DBHelper.openDatabase().then(db => {\r\n      if (!db) return;\r\n\r\n      let tx = db.transaction('restaurants');\r\n      let store = tx.objectStore('restaurants');\r\n\r\n      store.get(parseInt(id))\r\n        .then(data => {\r\n          if (data && data.name.length > 0) {\r\n            return callback(null, data);\r\n          }\r\n          fetch(DBHelper.DATABASE_URL + '/' + id)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                store.put(data);\r\n              });\r\n              return callback(null, data);\r\n            })\r\n            .catch(e => callback('Restaurant request from web failed', null));\r\n        })\r\n        .catch(e => callback('Restaurant does not exist', null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = results.map((v, i) => results[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = results.map((v, i) => results[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.photograph) {\r\n      return (`/img/${restaurant.photograph}-original.jpg`);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}