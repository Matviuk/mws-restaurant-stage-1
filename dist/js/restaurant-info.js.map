{"version":3,"sources":["restaurant_info.js","dbhelper.js","app.js","idb.js"],"names":["restaurant","map","dbPromise","navigator","serviceWorker","register","scope","then","reg","console","log","catch","error","window","initMap","fetchRestaurantFromURL","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","fetchRestaurantFromURLForMap","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","innerHTML","setAttribute","address","photograph","picture","webp1","createElement","webp2","webp3","jpg1","jpg2","jpg3","image","dataset","srcset","media","type","append","src","alt","cuisine_type","addToFav","favorite","title","classList","add","remove","addEventListener","event","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","images","querySelectorAll","observer","preloadImage","element","onIntersection","entries","forEach","entry","intersectionRatio","unobserve","target","IntersectionObserver","rootMargin","threshold","observe","Array","from","operatingHours","hours","key","row","day","appendChild","time","container","fetchReviewsById","reviews","noReviews","ul","review","createReviewHTML","li","tabindex","hdr","className","date","Date","updatedAt","toDateString","rating","comments","breadcrumb","url","location","href","replace","results","RegExp","exec","decodeURIComponent","DATABASE_URL","[object Object]","idb","open","upgradeDb","storeRestaurants","createObjectStore","keyPath","createIndex","Promise","resolve","reject","openDatabase","db","transaction","objectStore","getAll","data","length","fetch","response","json","store","put","e","requestError","get","parseInt","cuisine","fetchRestaurants","restaurants","filter","r","neighborhood","getReviewsFromCache","onLine","ok","Error","status","putReviewsToIDB","this","tx","restaurant_id","complete","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","Marker","position","urlForRestaurant","animation","Animation","DROP","promisifyRequest","request","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","slice","call","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default"],"mappings":"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","file":"restaurant-info.js","sourcesContent":["let restaurant;\nvar map;\n\n// document.addEventListener('DOMContentLoaded', (event) => {\n//   fetchRestaurantFromURL((error, restaurant) => {\n//     if (error) { // Got an error!\n//       console.error(error);\n//     } else {\n//       fillBreadcrumb();\n//     }\n//   });\n// });\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL (for Google map).\n */\nfetchRestaurantFromURLForMap = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n  name.setAttribute('aria-label', `${restaurant.name} restaurant`)\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n  address.setAttribute('aria-label', `Address: ${restaurant.address}`)\n\n  if (restaurant.photograph) {\n    const picture = document.getElementById('restaurant-img');\n    const webp1 = document.createElement('source');\n    const webp2 = document.createElement('source');\n    const webp3 = document.createElement('source');\n    const jpg1 = document.createElement('source');\n    const jpg2 = document.createElement('source');\n    const jpg3 = document.createElement('source');\n    const image = document.createElement('img');\n\n    webp1.dataset.srcset = `/img/${restaurant.photograph}-680.webp`;\n    webp1.media = '(min-width: 471px) and (max-width: 760px), (min-width: 941px) and (max-width: 1520px)';\n    webp1.type = 'image/webp';\n    picture.append(webp1);\n\n    webp2.dataset.srcset = `/img/${restaurant.photograph}-390.webp`;\n    webp2.media = '(max-width: 470px), (min-width: 841px) and (max-width: 940px)';\n    webp2.type = 'image/webp';\n    picture.append(webp2);\n\n    webp3.dataset.srcset = `/img/${restaurant.photograph}-original.webp`;\n    webp3.media = '(min-width: 761px) and (max-width: 840px), (min-width: 1521px)';\n    webp3.type = 'image/webp';\n    picture.append(webp3);\n\n    jpg1.dataset.srcset = `/img/${restaurant.photograph}-680.jpg`;\n    jpg1.media = '(min-width: 471px) and (max-width: 760px), (min-width: 941px) and (max-width: 1520px)';\n    jpg1.type = 'image/jpeg';\n    picture.append(jpg1);\n\n    jpg2.dataset.srcset = `/img/${restaurant.photograph}-390.jpg`;\n    jpg2.media = '(max-width: 470px), (min-width: 841px) and (max-width: 940px)';\n    jpg2.type = 'image/jpeg';\n    picture.append(jpg2);\n\n    jpg3.dataset.srcset = `/img/${restaurant.photograph}-original.jpg`;\n    jpg3.media = '(min-width: 761px) and (max-width: 840px), (min-width: 1521px)';\n    jpg3.type = 'image/jpeg';\n    picture.append(jpg3);\n\n    image.src = `/img/${restaurant.photograph}-15.jpg`;\n    image.dataset.src = `/img/${restaurant.photograph}-original.jpg`;\n    image.alt = `${restaurant.name} restaurant's photo`;\n    picture.append(image);\n  }\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  const addToFav = document.getElementById('add-to-fav');\n  if(restaurant.favorite && restaurant.favorite == 1) {\n    addToFav.setAttribute('aria-checked', 'true');\n    addToFav.title = `Remove ${restaurant.name} from favorites`;\n    addToFav.setAttribute('aria-label', `Remove ${restaurant.name} from favorites`);\n    addToFav.innerHTML = 'Remove from favorites <span>&#x2764;</span>';\n    addToFav.classList.add('active');\n  } else {\n    addToFav.setAttribute('aria-checked', 'false');\n    addToFav.title = `Add ${restaurant.name} to favorites`;\n    addToFav.setAttribute('aria-label', `Add ${restaurant.name} to favorites`);\n    addToFav.innerHTML = 'Add to favorites <span>&#x2764;</span>';\n    addToFav.classList.remove('active');\n  }\n  addToFav.addEventListener('click', event => {\n    console.log('Click on addToFav');\n  });\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n\n  // Use IntersectionObserver for lazy loading images\n  const images = window.document.querySelectorAll('source, img');\n  const config = {\n    rootMargin: '0px',\n    threshold: 0.1\n  };\n  let observer;\n\n  let preloadImage = (element) => {\n\n    if(element.dataset && element.dataset.src) {\n      element.src = element.dataset.src;\n    }\n\n    if(element.dataset && element.dataset.srcset) {\n      element.srcset = element.dataset.srcset;\n    }\n  }\n\n  let onIntersection = (entries) => {\n    entries.forEach(entry => {\n      if (entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        preloadImage(entry.target);\n      }\n    });\n  }\n\n  if (!('IntersectionObserver' in window)) {\n    Array.from(images).forEach(image => preloadImage(image));\n  } else {\n    observer = new IntersectionObserver(onIntersection, config);\n    images.forEach(image => {\n      observer.observe(image);\n    });\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = () => {\n  const container = document.getElementById('reviews-container');\n  // const title = document.createElement('h2');\n  // title.innerHTML = 'Reviews';\n  // container.appendChild(title);\n\n  DBHelper.fetchReviewsById(getParameterByName('id'))\n    .then(reviews => {\n      if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n      }\n      const ul = document.getElementById('reviews-list');\n      reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n      });\n      // container.appendChild(ul);\n    })\n    .catch(error => console.error(error));\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.tabindex = 0;\n  const hdr = document.createElement('h3');\n  const name = document.createElement('span');\n  name.className = 'review-name';\n  name.innerHTML = review.name;\n  hdr.appendChild(name);\n\n  const date = document.createElement('span');\n  date.innerHTML = new Date(review.updatedAt).toDateString();\n  date.setAttribute('class', 'review-date');\n  hdr.appendChild(date);\n  li.appendChild(hdr);\n\n  const rating = document.createElement('p');\n  rating.className = 'review-rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n","var dbPromise;\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Your server port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Create and/or open IDB.\r\n   */\r\n\r\n  static openDatabase() {\r\n    return idb.open(\"RestReview\", 2, function(upgradeDb) {\r\n      let storeRestaurants = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      let storeReviews = upgradeDb.createObjectStore('reviews', {keyPath: 'restaurant_id'});\r\n      storeRestaurants.createIndex('cuisine','cuisine_type');\r\n      storeRestaurants.createIndex('neighborhood','neighborhood');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from IDB.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return new Promise((resolve,reject) => {\r\n      DBHelper.openDatabase().then(db => {\r\n        if (!db) return;\r\n\r\n        let tx = db.transaction('restaurants');\r\n        let store = tx.objectStore('restaurants');\r\n\r\n        store.getAll().then(data => {\r\n          if (data && data.length > 0) {\r\n            resolve(data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                data.forEach(restaurant => store.put(restaurant));\r\n              });\r\n              return resolve(data);\r\n            })\r\n            .catch(e => requestError(e, 'Restaurants request from web failed'));\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    DBHelper.openDatabase().then(db => {\r\n      if (!db) return;\r\n\r\n      let tx = db.transaction('restaurants');\r\n      let store = tx.objectStore('restaurants');\r\n\r\n      store.get(parseInt(id))\r\n        .then(data => {\r\n          if (data && data.name.length > 0) {\r\n            return callback(null, data);\r\n          }\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants/' + id)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                store.put(data);\r\n              });\r\n              return callback(null, data);\r\n            })\r\n            .catch(e => callback('Restaurant request from web failed', null));\r\n        })\r\n        .catch(e => callback('Restaurant does not exist', null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurant's reviews.\r\n   */\r\n  static fetchReviewsById(id) {\r\n    return new Promise((resolve, reject) => {\r\n      DBHelper.getReviewsFromCache().then(function(data) {\r\n        if (data.length > 0 && !navigator.onLine){\r\n          resolve(data[0]);\r\n        }\r\n\r\n        fetch(DBHelper.DATABASE_URL + '/reviews/?restaurant_id=' + id)\r\n          .then(response => {\r\n            if (response.ok) {\r\n              return response.json();\r\n            }\r\n            reject(new Error(`Request failed with status code : ${response.status}`));\r\n          })\r\n          .then(data => {\r\n            DBHelper.putReviewsToIDB(data);\r\n            resolve(data);\r\n          })\r\n          .catch(error => reject(error));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show cached reviews stored in IDB\r\n   */\r\n  static getReviewsFromCache() {\r\n    if (!dbPromise) {\r\n      dbPromise = this.openDatabase();\r\n    }\r\n\r\n    return dbPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      var tx = db.transaction('reviews');\r\n      var store = tx.objectStore('reviews');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Put reviews to IDB\r\n   */\r\n  static putReviewsToIDB(reviews) {\r\n    if (!dbPromise) {\r\n      dbPromise = this.openDatabase();\r\n    }\r\n\r\n    dbPromise.then(db => {\r\n      if(!db) return db;\r\n\r\n      var tx = db.transaction('reviews', 'readwrite');\r\n      var store = tx.objectStore('reviews');\r\n\r\n\r\n      if (reviews.length > 0) {\r\n        reviews.restaurant_id = parseInt(reviews[0].restaurant_id);\r\n        store.put(reviews);\r\n      }\r\n\r\n      return tx.complete;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = results.map((v, i) => results[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = results.map((v, i) => results[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.photograph) {\r\n      return (`/img/${restaurant.photograph}-original.jpg`);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js', {scope: './'}).then(function(reg) {\r\n    console.log('Registration succeeded. Scope is ' + reg.scope);\r\n  }).catch(function(error) {\r\n    console.log('Registration failed with ' + error);\r\n  });\r\n}","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}