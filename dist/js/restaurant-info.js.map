{"version":3,"sources":["restaurant_info.js","app.js","dbhelper.js","idb.js"],"names":["restaurant","map","navigator","serviceWorker","register","scope","then","reg","console","log","catch","error","document","addEventListener","event","fetchRestaurantFromURL","fillBreadcrumb","window","initMap","fetchRestaurantFromURLForMap","self","google","maps","Map","getElementById","zoom","center","latlng","scrollwheel","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","innerHTML","setAttribute","address","photograph","image","className","src","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","tabindex","hdr","date","rating","comments","breadcrumb","url","location","href","replace","results","RegExp","exec","decodeURIComponent","DATABASE_URL","[object Object]","idb","open","upgradeDb","store","createObjectStore","keyPath","createIndex","Promise","resolve","reject","openDatabase","db","transaction","objectStore","getAll","data","length","fetch","response","json","put","e","requestError","get","parseInt","cuisine","fetchRestaurants","restaurants","filter","r","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","Marker","position","urlForRestaurant","animation","Animation","DROP","promisifyRequest","request","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","Array","slice","call","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default"],"mappings":"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","file":"restaurant-info.js","sourcesContent":["let restaurant;\nvar map;\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      fillBreadcrumb();\n    }\n  });\n});\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURLForMap((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      // fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL (for Google map).\n */\nfetchRestaurantFromURLForMap = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n  name.setAttribute('aria-label', `${restaurant.name} restaurant`)\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n  address.setAttribute('aria-label', `Address: ${restaurant.address}`)\n\n  if (restaurant.photograph) {\n    const image = document.getElementById('restaurant-img');\n    image.className = 'restaurant-img'\n    image.src = `/img/${restaurant.photograph}-original.jpg`;\n    image.setAttribute('alt', `${restaurant.name} restaurant's photo`);\n  }\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.tabindex = 0;\n  const hdr = document.createElement('h3');\n  const name = document.createElement('span');\n  name.setAttribute('class', 'review-name');\n  name.innerHTML = review.name;\n  hdr.appendChild(name);\n\n  const date = document.createElement('span');\n  date.innerHTML = review.date;\n  date.setAttribute('class', 'review-date');\n  hdr.appendChild(date);\n  li.appendChild(hdr);\n\n  const rating = document.createElement('p');\n  rating.setAttribute('class', 'review-rating');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n","if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js', {scope: './'}).then(function(reg) {\r\n    console.log('Registration succeeded. Scope is ' + reg.scope);\r\n  }).catch(function(error) {\r\n    console.log('Registration failed with ' + error);\r\n  });\r\n}","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Create and/or open IDB.\r\n   */\r\n\r\n  static openDatabase() {\r\n    return idb.open(\"RestReview\", 1, function(upgradeDb) {\r\n      let store = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      store.createIndex('cuisine','cuisine_type');\r\n      store.createIndex('neighborhood','neighborhood');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from IDB.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return new Promise((resolve,reject) => {\r\n      DBHelper.openDatabase().then(db => {\r\n        if (!db) return;\r\n\r\n        let tx = db.transaction('restaurants');\r\n        let store = tx.objectStore('restaurants');\r\n\r\n        store.getAll().then(data => {\r\n          if (data && data.length > 0) {\r\n            resolve(data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                data.forEach(restaurant => store.put(restaurant));\r\n              });\r\n              return resolve(data);\r\n            })\r\n            .catch(e => requestError(e, 'Restaurants request from web failed'));\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    DBHelper.openDatabase().then(db => {\r\n      if (!db) return;\r\n\r\n      let tx = db.transaction('restaurants');\r\n      let store = tx.objectStore('restaurants');\r\n\r\n      store.get(parseInt(id))\r\n        .then(data => {\r\n          if (data && data.name.length > 0) {\r\n            return callback(null, data);\r\n          }\r\n          fetch(DBHelper.DATABASE_URL + '/' + id)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                store.put(data);\r\n              });\r\n              return callback(null, data);\r\n            })\r\n            .catch(e => callback('Restaurant request from web failed', null));\r\n        })\r\n        .catch(e => callback('Restaurant does not exist', null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = results.map((v, i) => results[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = results.map((v, i) => results[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.photograph) {\r\n      return (`/img/${restaurant.photograph}-original.jpg`);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}