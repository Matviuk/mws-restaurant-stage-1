{"version":3,"sources":["restaurant_info.js","dbhelper.js","app.js","idb.js"],"names":["restaurant","map","connectionChecker","IDBPromise","navigator","serviceWorker","register","scope","then","reg","console","log","catch","error","document","addEventListener","event","mapbtn","getElementById","mapbox","classList","toggle","contains","innerHTML","window","initMap","fetchRestaurantFromURL","self","google","maps","Map","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","fetchRestaurantFromURLForMap","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","setAttribute","address","photograph","picture","webp1","createElement","webp2","webp3","jpg1","jpg2","jpg3","image","dataset","srcset","media","type","append","src","alt","cuisine_type","addToFav","is_favorite","title","add","remove","favoriteStat","alertText","toggleFavStat","data","dispAlertBlock","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","images","querySelectorAll","observer","preloadImage","element","onIntersection","entries","forEach","entry","intersectionRatio","unobserve","target","IntersectionObserver","rootMargin","threshold","observe","Array","from","operatingHours","hours","key","row","day","appendChild","time","container","fetchReviewsById","reviews","noReviews","ul","review","createReviewHTML","form","value","restaurant_id","preventDefault","restID","parseInt","stripTags","isNaN","trim","length","radiobox","querySelector","rating","comments","sendReview","li","tabindex","hdr","className","date","Date","updatedAt","toDateString","sendReviewToServer","reset","onLine","saveOfflineReviewToIDB","setInterval","checkConnection","clearInterval","sendReviewFromIDB","breadcrumb","url","location","href","replace","results","RegExp","exec","decodeURIComponent","text","alertType","alertBlock","setTimeout","str","DATABASE_URL","[object Object]","idb","open","upgradeDb","storeRestaurants","createObjectStore","keyPath","createIndex","Promise","resolve","reject","openDatabase","db","transaction","objectStore","getAll","fetch","response","json","store","put","e","requestError","this","get","cuisine","fetchRestaurants","restaurants","filter","r","neighborhood","getReviewsFromCache","putReviewsToIDB","tx","complete","method","body","JSON","stringify","push","delete","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","Marker","position","urlForRestaurant","animation","Animation","DROP","promisifyRequest","request","onsuccess","result","onerror","promisifyRequestCall","obj","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","slice","call","nativeObject","query","count","instance","items","iterateCursor","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","module","exports","default"],"mappings":"AAAA,IAAAA,WACAC,IACAC,kBCFAC,WCAAC,UAAAC,eACAD,UAAAC,cAAAC,SAAA,UAAAC,MAAA,OAAAC,KAAA,SAAAC,GACAC,QAAAC,IAAA,oCAAAF,EAAAF,SACAK,MAAA,SAAAC,GACAH,QAAAC,IAAA,4BAAAE,KFGAC,SAAAC,iBAAA,mBAAAC,IACA,MAAAC,EAAAH,SAAAI,eAAA,YACAC,EAAAL,SAAAI,eAAA,iBACAD,EAAAF,iBAAA,QAAAC,IACAG,EAAAC,UAAAC,OAAA,UAEAF,EAAAC,UAAAE,SAAA,UACAL,EAAAM,UAAA,eAEAN,EAAAM,UAAA,8BAQAC,OAAAC,QAAA,MACAC,uBAAA,CAAAb,EAAAb,KACAa,EACAH,QAAAG,MAAAA,IAEAc,KAAA1B,IAAA,IAAA2B,OAAAC,KAAAC,IAAAhB,SAAAI,eAAA,QACAa,KAAA,GACAC,OAAAhC,EAAAiC,OACAC,aAAA,IAEAC,iBACAC,SAAAC,uBAAAV,KAAA3B,WAAA2B,KAAA1B,UAQAqC,6BAAA,CAAAC,IACA,GAAAZ,KAAA3B,WAEA,YADAuC,EAAA,KAAAZ,KAAA3B,YAGA,MAAAwC,EAAAC,mBAAA,MACAD,EAIAJ,SAAAM,oBAAAF,EAAA,CAAA3B,EAAAb,KACA2B,KAAA3B,WAAAA,EACAA,EAIAuC,EAAA,KAAAvC,GAHAU,QAAAG,MAAAA,MANAA,MAAA,0BACA0B,EAAA1B,MAAA,SAgBAa,uBAAA,CAAAa,IACA,GAAAZ,KAAA3B,WAEA,YADAuC,EAAA,KAAAZ,KAAA3B,YAGA,MAAAwC,EAAAC,mBAAA,MACAD,EAIAJ,SAAAM,oBAAAF,EAAA,CAAA3B,EAAAb,KACA2B,KAAA3B,WAAAA,EACAA,GAIA2C,qBACAJ,EAAA,KAAAvC,IAJAU,QAAAG,MAAAA,MANAA,MAAA,0BACA0B,EAAA1B,MAAA,SAiBA8B,mBAAA,EAAA3C,EAAA2B,KAAA3B,cACA,MAAA4C,EAAA9B,SAAAI,eAAA,mBACA0B,EAAArB,UAAAvB,EAAA4C,KACAA,EAAAC,aAAA,gBAAA7C,EAAA4C,mBAEA,MAAAE,EAAAhC,SAAAI,eAAA,sBAIA,GAHA4B,EAAAvB,UAAAvB,EAAA8C,QACAA,EAAAD,aAAA,yBAAA7C,EAAA8C,WAEA9C,EAAA+C,WAAA,CACA,MAAAC,EAAAlC,SAAAI,eAAA,kBACA+B,EAAAnC,SAAAoC,cAAA,UACAC,EAAArC,SAAAoC,cAAA,UACAE,EAAAtC,SAAAoC,cAAA,UACAG,EAAAvC,SAAAoC,cAAA,UACAI,EAAAxC,SAAAoC,cAAA,UACAK,EAAAzC,SAAAoC,cAAA,UACAM,EAAA1C,SAAAoC,cAAA,OAEAD,EAAAQ,QAAAC,eAAA1D,EAAA+C,sBACAE,EAAAU,MAAA,wFACAV,EAAAW,KAAA,aACAZ,EAAAa,OAAAZ,GAEAE,EAAAM,QAAAC,eAAA1D,EAAA+C,sBACAI,EAAAQ,MAAA,gEACAR,EAAAS,KAAA,aACAZ,EAAAa,OAAAV,GAEAC,EAAAK,QAAAC,eAAA1D,EAAA+C,2BACAK,EAAAO,MAAA,iEACAP,EAAAQ,KAAA,aACAZ,EAAAa,OAAAT,GAEAC,EAAAI,QAAAC,eAAA1D,EAAA+C,qBACAM,EAAAM,MAAA,wFACAN,EAAAO,KAAA,aACAZ,EAAAa,OAAAR,GAEAC,EAAAG,QAAAC,eAAA1D,EAAA+C,qBACAO,EAAAK,MAAA,gEACAL,EAAAM,KAAA,aACAZ,EAAAa,OAAAP,GAEAC,EAAAE,QAAAC,eAAA1D,EAAA+C,0BACAQ,EAAAI,MAAA,iEACAJ,EAAAK,KAAA,aACAZ,EAAAa,OAAAN,GAEAC,EAAAM,YAAA9D,EAAA+C,oBACAS,EAAAC,QAAAK,YAAA9D,EAAA+C,0BACAS,EAAAO,OAAA/D,EAAA4C,0BACAI,EAAAa,OAAAL,GAGA1C,SAAAI,eAAA,sBACAK,UAAAvB,EAAAgE,aAEA,MAAAC,EAAAnD,SAAAI,eAAA,eACA,IAAAlB,EAAAkE,aAAA,QAAAlE,EAAAkE,aACAD,EAAApB,aAAA,eAAA,QACAoB,EAAAE,gBAAAnE,EAAA4C,sBACAqB,EAAApB,aAAA,uBAAA7C,EAAA4C,uBACAqB,EAAA1C,UAAA,8CACA0C,EAAA7C,UAAAgD,IAAA,YAEAH,EAAApB,aAAA,eAAA,SACAoB,EAAAE,aAAAnE,EAAA4C,oBACAqB,EAAApB,aAAA,oBAAA7C,EAAA4C,qBACAqB,EAAA1C,UAAA,yCACA0C,EAAA7C,UAAAiD,OAAA,WAEAJ,EAAAlD,iBAAA,QAAAC,IACA,IAAAsD,EACAC,EAGAD,IADAL,EAAA7C,UAAAE,SAAA,UAMAc,SAAAoC,cAAAxE,EAAAwC,GAAA8B,GACA9D,KAAAiE,IACA9C,KAAA3B,WAAAyE,GAEA,IAAAA,EAAAP,aAAA,QAAAO,EAAAP,aACAD,EAAApB,aAAA,eAAA,QACAoB,EAAAE,gBAAAnE,EAAA4C,sBACAqB,EAAApB,aAAA,uBAAA7C,EAAA4C,uBACAqB,EAAA1C,UAAA,8CACA0C,EAAA7C,UAAAgD,IAAA,UACAG,KAAAvE,EAAA4C,0CAEAqB,EAAApB,aAAA,eAAA,SACAoB,EAAAE,aAAAnE,EAAA4C,oBACAqB,EAAApB,aAAA,oBAAA7C,EAAA4C,qBACAqB,EAAA1C,UAAA,yCACA0C,EAAA7C,UAAAiD,OAAA,UACAE,KAAAvE,EAAA4C,6CAGA8B,eAAAH,EAAA,aAEA3D,MAAAC,GAAAH,QAAAG,MAAAA,MAIAb,EAAA2E,iBACAC,0BAGAC,kBAGA,MAAAC,EAAAtD,OAAAV,SAAAiE,iBAAA,eAKA,IAAAC,EAEAC,EAAAC,IAEAA,EAAAzB,SAAAyB,EAAAzB,QAAAK,MACAoB,EAAApB,IAAAoB,EAAAzB,QAAAK,KAGAoB,EAAAzB,SAAAyB,EAAAzB,QAAAC,SACAwB,EAAAxB,OAAAwB,EAAAzB,QAAAC,SAIAyB,EAAAC,IACAA,EAAAC,QAAAC,IACAA,EAAAC,kBAAA,IACAP,EAAAQ,UAAAF,EAAAG,QACAR,EAAAK,EAAAG,YAKA,yBAAAjE,QAGAwD,EAAA,IAAAU,qBAAAP,GA5BAQ,WAAA,MACAC,UAAA,KA4BAd,EAAAO,QAAA7B,IACAwB,EAAAa,QAAArC,MAJAsC,MAAAC,KAAAjB,GAAAO,QAAA7B,GAAAyB,EAAAzB,MAYAoB,wBAAA,EAAAoB,EAAArE,KAAA3B,WAAA2E,mBACA,MAAAsB,EAAAnF,SAAAI,eAAA,oBACA,IAAA,IAAAgF,KAAAF,EAAA,CACA,MAAAG,EAAArF,SAAAoC,cAAA,MAEAkD,EAAAtF,SAAAoC,cAAA,MACAkD,EAAA7E,UAAA2E,EACAC,EAAAE,YAAAD,GAEA,MAAAE,EAAAxF,SAAAoC,cAAA,MACAoD,EAAA/E,UAAAyE,EAAAE,GACAC,EAAAE,YAAAC,GAEAL,EAAAI,YAAAF,MAOAtB,gBAAA,MACA,MAAA0B,EAAAzF,SAAAI,eAAA,qBAKAkB,SAAAoE,iBAAA/D,mBAAA,OACAjC,KAAAiG,IACA,IAAAA,EAAA,CACA,MAAAC,EAAA5F,SAAAoC,cAAA,KAGA,OAFAwD,EAAAnF,UAAA,uBACAgF,EAAAF,YAAAK,GAIA/E,KAAA3B,WAAAyG,QAAAA,EAEA,MAAAE,EAAA7F,SAAAI,eAAA,gBACAuF,EAAApB,QAAAuB,IACAD,EAAAN,YAAAQ,iBAAAD,MAKA,MAAAE,EAAAhG,SAAAI,eAAA,eACAJ,SAAAI,eAAA,iBACA6F,MAAAN,EAAAO,cAEAF,EAAA/F,iBAAA,SAAA,SAAAC,GACAA,EAAAiG,iBAEA,MAAAC,EAAAC,SAAAC,UAAAtG,SAAAI,eAAA,iBAAA6F,QACA,GAAAM,MAAAH,GAEA,YADAxC,eAAA,kDAAA,SAIA,IAAA9B,EAAAwE,UAAAtG,SAAAI,eAAA,QAAA6F,OACA,GAAAnE,EAAA0E,OAAAC,OAAA,EAEA,YADA7C,eAAA,+BAAA,SAGA,IAAA8C,EAAA1G,SAAA2G,cAAA,gCACAC,EAAA,EAIA,GAHAF,IACAE,EAAAP,SAAAK,EAAAT,QAEA,GAAAW,GAAAL,MAAAK,GAEA,YADAhD,eAAA,6BAAA,SAIA,IAAAiD,EAAAP,UAAAtG,SAAAI,eAAA,YAAA6F,OACAY,EAAAL,OAAAC,OAAA,EACA7C,eAAA,kCAAA,SAIAkD,WAAAV,EAAAtE,EAAA8E,EAAAC,EAAAhB,EAAAG,OAGAlG,MAAAC,GAAAH,QAAAG,MAAAA,MAMAgG,iBAAA,CAAAD,IACA,MAAAiB,EAAA/G,SAAAoC,cAAA,MACA2E,EAAAC,SAAA,EACA,MAAAC,EAAAjH,SAAAoC,cAAA,MACAN,EAAA9B,SAAAoC,cAAA,QACAN,EAAAoF,UAAA,cACApF,EAAArB,UAAAqF,EAAAhE,KACAmF,EAAA1B,YAAAzD,GAEA,MAAAqF,EAAAnH,SAAAoC,cAAA,QACA+E,EAAA1G,UAAA,IAAA2G,KAAAtB,EAAAuB,WAAAC,eACAH,EAAApF,aAAA,QAAA,eACAkF,EAAA1B,YAAA4B,GACAJ,EAAAxB,YAAA0B,GAEA,MAAAL,EAAA5G,SAAAoC,cAAA,KACAwE,EAAAM,UAAA,gBACAN,EAAAnG,qBAAAqF,EAAAc,SACAG,EAAAxB,YAAAqB,GAEA,MAAAC,EAAA7G,SAAAoC,cAAA,KAIA,OAHAyE,EAAApG,UAAAqF,EAAAe,SACAE,EAAAxB,YAAAsB,GAEAE,IAMAD,WAAA,EAAAV,EAAAtE,EAAA8E,EAAAC,EAAAhB,EAAAG,KACA1E,SAAAiG,mBAAAnB,EAAAtE,EAAA8E,EAAAC,EAAAhG,KAAA3B,WAAAyG,SACAjG,KAAAiE,IACAqC,EAAAwB,QACA5D,eAAA,6BAAA,WACAiC,EAAAN,YAAAQ,iBAAApC,MAEA7D,MAAAC,IACAT,UAAAmI,OACA7D,eAAA,iCAAA,UAEAtC,SAAAoG,uBAAAtB,EAAAtE,EAAA8E,EAAAC,GACAjD,eAAA,4EAAA,SAEAxE,kBAAAuI,YAAA,KACAC,gBAAAxB,EAAAP,EAAAG,IACA,UAQA4B,gBAAA,EAAAxB,EAAAP,EAAAG,KACA1G,UAAAmI,SACAI,cAAAzI,mBACAwE,eAAA,kDAAA,WAEAtC,SAAAwG,kBAAA1B,EAAAvF,KAAA3B,WAAAyG,SACAjG,KAAAiE,IACAqC,EAAAwB,QACA5D,eAAA,6BAAA,WACAiC,EAAAN,YAAAQ,iBAAApC,SAQAtC,eAAA,EAAAnC,EAAA2B,KAAA3B,cACA,MAAA6I,EAAA/H,SAAAI,eAAA,cACA2G,EAAA/G,SAAAoC,cAAA,MACA2E,EAAAtG,UAAAvB,EAAA4C,KACAiG,EAAAxC,YAAAwB,KAMApF,mBAAA,EAAAG,EAAAkG,KACAA,IACAA,EAAAtH,OAAAuH,SAAAC,MACApG,EAAAA,EAAAqG,QAAA,UAAA,QACA,MACAC,EADA,IAAAC,cAAAvG,sBACAwG,KAAAN,GACA,OAAAI,EAEAA,EAAA,GAEAG,mBAAAH,EAAA,GAAAD,QAAA,MAAA,MADA,GAFA,OASAvE,eAAA,EAAA4E,EAAAC,EAAA,aACA,MAAAC,EAAA1I,SAAA2G,cAAA,UAEA+B,EAAAjI,UAAA+H,EACAE,EAAAxB,UAAA,QACAwB,EAAApI,UAAAgD,aAAAmF,KACAC,EAAApI,UAAAgD,IAAA,UAMAqF,WAAA,KACAD,EAAApI,UAAAiD,OAAA,WACA,OAGA+C,UAAA,CAAAsC,IAGA,OAAAA,EAAAT,QADA,2CACA,IAAAA,QAFA,iCAEA,YC9bA7G,SAMAuH,0BAEA,MAAA,wBAOAC,sBACA,OAAAC,IAAAC,KAAA,aAAA,EAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,kBAAA,eAAAC,QAAA,OACAH,EAAAE,kBAAA,WAAAC,QAAA,kBACAH,EAAAE,kBAAA,kBAAAC,QAAA,kBACAF,EAAAG,YAAA,UAAA,gBACAH,EAAAG,YAAA,eAAA,kBAOAP,wBAAArH,GACA,OAAA,IAAA6H,QAAA,CAAAC,EAAAC,KACAnK,aACAA,WAAAiC,SAAAmI,gBAGApK,WAAAK,KAAAgK,IACA,IAAAA,EAAA,OAAAA,EAEAA,EAAAC,YAAA,eACAC,YAAA,eAEAC,SAAAnK,KAAAiE,IACAA,EAAA8C,OAAA,IAAAnH,UAAAmI,QACA8B,EAAA5F,GAGAmG,MAAAxI,SAAAuH,aAAA,gBACAnJ,KAAAqK,GAAAA,EAAAC,QACAtK,KAAAiE,IACAtE,WAAAK,KAAAgK,IACA,IAAAA,EAAA,OAAAA,EAEA,IACAO,EADAP,EAAAC,YAAA,cAAA,aACAC,YAAA,eAEAjG,EAAAY,QAAArF,GAAA+K,EAAAC,IAAAhL,MAEAqK,EAAA5F,KAEA7D,MAAAqK,GAAAC,aAAAD,EAAA,8CASArB,2BAAApH,EAAAD,GACApC,aACAA,WAAAgL,KAAAZ,gBAGApK,WAAAK,KAAAgK,IACA,IAAAA,EAAA,OAAAA,EAEAA,EAAAC,YAAA,eACAC,YAAA,eAEAU,IAAAjE,SAAA3E,IACAhC,KAAAiE,IACA,GAAAA,GAAAA,EAAA7B,KAAA2E,OAAA,IAAAnH,UAAAmI,OACA,OAAAhG,EAAA,KAAAkC,GAGAmG,MAAAxI,SAAAuH,aAAA,gBAAAnH,GACAhC,KAAAqK,GAAAA,EAAAC,QACAtK,KAAAiE,IACAtE,WAAAK,KAAAgK,IACA,IAAAA,EAAA,OAAAA,EAEAA,EAAAC,YAAA,cAAA,aACAC,YAAA,eAEAM,IAAAvG,KAEAlC,EAAA,KAAAkC,KAEA7D,MAAAqK,GAAA1I,EAAA,qCAAA,SAEA3B,MAAAqK,GAAA1I,EAAA,4BAAA,SAOAqH,gCAAAyB,EAAA9I,GAEAH,SAAAkJ,iBAAA,CAAAzK,EAAA0K,KACA,GAAA1K,EACA0B,EAAA1B,EAAA,UACA,CAEA,MAAAqI,EAAAqC,EAAAC,OAAAC,GAAAA,EAAAzH,cAAAqH,GACA9I,EAAA,KAAA2G,MAQAU,qCAAA8B,EAAAnJ,GAEAH,SAAAkJ,iBAAA,CAAAzK,EAAA0K,KACA,GAAA1K,EACA0B,EAAA1B,EAAA,UACA,CAEA,MAAAqI,EAAAqC,EAAAC,OAAAC,GAAAA,EAAAC,cAAAA,GACAnJ,EAAA,KAAA2G,MAQAU,+CAAAyB,EAAAK,EAAAnJ,GAEAH,SAAAkJ,mBAAA9K,KAAA0I,IACA,OAAAmC,IACAnC,EAAAA,EAAAsC,OAAAC,GAAAA,EAAAzH,cAAAqH,IAEA,OAAAK,IACAxC,EAAAA,EAAAsC,OAAAC,GAAAA,EAAAC,cAAAA,IAEAnJ,EAAA,KAAA2G,KACAtI,MAAAqK,GAAA1I,EAAA0I,EAAA,OAMArB,wBAAApH,GACA,OAAA,IAAA4H,QAAA,CAAAC,EAAAC,KACAlI,SAAAuJ,sBAAAnL,KAAA,SAAAiE,GACAA,EAAA8C,OAAA,IAAAnH,UAAAmI,QACA8B,EAAA5F,EAAA,IAGAmG,MAAAxI,SAAAuH,aAAA,2BAAAnH,GACAhC,KAAAqK,GAAAA,EAAAC,QACAtK,KAAAiE,IACArC,SAAAwJ,gBAAAnH,GACA4F,EAAA5F,KAEA7D,MAAAC,GAAAyJ,EAAAzJ,QAQA+I,6BAKA,OAJAzJ,aACAA,WAAAgL,KAAAZ,gBAGApK,WAAAK,KAAAgK,IACA,OAAAA,EAEAA,EAAAC,YAAA,WACAC,YAAA,WAEAC,SALAH,IAYAZ,uBAAAnD,GACAtG,aACAA,WAAAgL,KAAAZ,gBAGApK,WAAAK,KAAAgK,IACA,IAAAA,EAAA,OAAAA,EAEA,IAAAqB,EAAArB,EAAAC,YAAA,UAAA,aACAM,EAAAc,EAAAnB,YAAA,WAQA,OALAjE,EAAAc,OAAA,IACAd,EAAAO,cAAAG,SAAAV,EAAA,GAAAO,eACA+D,EAAAC,IAAAvE,IAGAoF,EAAAC,WAOAlC,qBAAApH,EAAA8B,GAWA,OARAA,EAFA,iBAAA,EACA,QAAAA,GAMAA,EAGA,IAAA8F,QAAA,CAAAC,EAAAC,KACAM,MAAAxI,SAAAuH,aAAA,gBAAAnH,EAAA,iBAAA8B,GACAyH,OAAA,QAEAvL,KAAAqK,GAAAA,EAAAC,QACAtK,KAAAiE,GAAA4F,EAAA5F,MAOAmF,0BAAA1C,EAAAtE,EAAA8E,EAAAC,EAAAlB,GACA,OAAA,IAAA2D,QAAA,CAAAC,EAAAC,KACA5J,QAAAC,IAAAyB,SAAAuH,aAAA,aAEAiB,MAAAxI,SAAAuH,aAAA,YACAoC,OAAA,OACAC,KAAAC,KAAAC,WACAlF,cAAAE,EACAtE,KAAAA,EACA8E,OAAAA,EACAC,SAAAA,MAGAnH,KAAAqK,GAAAA,EAAAC,QACAtK,KAAAiE,IACAgC,EAAA0F,KAAA1H,GACArC,SAAAwJ,gBAAAnF,GACA4D,EAAA5F,KAEA7D,MAAAC,GAAAyJ,EAAAzJ,MAOA+I,8BAAA1C,EAAAtE,EAAA8E,EAAAC,GACAxH,aACAA,WAAAgL,KAAAZ,gBAGApK,WAAAK,KAAA,SAAAgK,GACA,GAAAA,EAAA,CAEA,IAAAqB,EAAArB,EAAAC,YAAA,iBAAA,aAUA,OATAoB,EAAAnB,YAAA,kBAEAM,KACAhE,cAAAE,EACAtE,KAAAA,EACA8E,OAAAA,EACAC,SAAAA,IAGAkE,EAAAC,YAOAlC,yBAAA1C,EAAAT,GACA,OAAA,IAAA2D,QAAA,CAAAC,EAAAC,KACAnK,aACAA,WAAAiC,SAAAmI,gBAGApK,WAAAK,KAAA,SAAAgK,GACA,GAAAA,EAKA,OAHAA,EAAAC,YAAA,kBACAC,YAAA,kBAEAU,IAAAlE,KAEA1G,KAAA,SAAAoG,GACAxE,SAAAiG,mBAAAzB,EAAAI,cAAAJ,EAAAhE,KAAAgE,EAAAc,OAAAd,EAAAe,SAAAlB,GACAjG,KAAAiE,IACAtE,WAAAK,KAAA,SAAAgK,GACA,IAAAqB,EAAArB,EAAAC,YAAA,iBAAA,aAKA,OAJAoB,EAAAnB,YAAA,kBAEA0B,OAAAlF,GAEA2E,EAAAC,WAEAzB,EAAA5F,KAEA7D,MAAAC,GAAAyJ,EAAAzJ,QAQA+I,0BAAArH,GAEAH,SAAAkJ,mBAAA9K,KAAA0I,IAEA,MAAAmD,EAAAnD,EAAAjJ,IAAA,CAAAqM,EAAAC,IAAArD,EAAAqD,GAAAb,cAEAc,EAAAH,EAAAb,OAAA,CAAAc,EAAAC,IAAAF,EAAAI,QAAAH,IAAAC,GACAhK,EAAA,KAAAiK,KACA5L,MAAAqK,GAAA1I,EAAA0I,EAAA,OAMArB,qBAAArH,GAEAH,SAAAkJ,mBAAA9K,KAAA0I,IAEA,MAAAwD,EAAAxD,EAAAjJ,IAAA,CAAAqM,EAAAC,IAAArD,EAAAqD,GAAAvI,cAEA2I,EAAAD,EAAAlB,OAAA,CAAAc,EAAAC,IAAAG,EAAAD,QAAAH,IAAAC,GACAhK,EAAA,KAAAoK,KACA/L,MAAAqK,GAAA1I,EAAA0I,EAAA,OAMArB,wBAAA5J,GACA,8BAAAA,EAAAwC,KAMAoH,6BAAA5J,GACA,QAAAA,EAAA+C,oBACA/C,EAAA+C,0BASA6G,8BAAA5J,EAAAC,GAQA,OAPA,IAAA2B,OAAAC,KAAA+K,QACAC,SAAA7M,EAAAiC,OACAkC,MAAAnE,EAAA4C,KACAkG,IAAA1G,SAAA0K,iBAAA9M,GACAC,IAAAA,EACA8M,UAAAnL,OAAAC,KAAAmL,UAAAC,SE7XA,WAKA,SAAAC,EAAAC,GACA,OAAA,IAAA/C,QAAA,SAAAC,EAAAC,GACA6C,EAAAC,UAAA,WACA/C,EAAA8C,EAAAE,SAGAF,EAAAG,QAAA,WACAhD,EAAA6C,EAAAtM,UAKA,SAAA0M,EAAAC,EAAAzB,EAAA0B,GACA,IAAAN,EACAO,EAAA,IAAAtD,QAAA,SAAAC,EAAAC,GAEA4C,EADAC,EAAAK,EAAAzB,GAAA4B,MAAAH,EAAAC,IACAjN,KAAA6J,EAAAC,KAIA,OADAoD,EAAAP,QAAAA,EACAO,EAWA,SAAAE,EAAAC,EAAAC,EAAAC,GACAA,EAAA1I,QAAA,SAAA2I,GACAC,OAAAC,eAAAL,EAAAM,UAAAH,GACA5C,IAAA,WACA,OAAAD,KAAA2C,GAAAE,IAEAI,IAAA,SAAAC,GACAlD,KAAA2C,GAAAE,GAAAK,OAMA,SAAAC,EAAAT,EAAAC,EAAAS,EAAAR,GACAA,EAAA1I,QAAA,SAAA2I,GACAA,KAAAO,EAAAJ,YACAN,EAAAM,UAAAH,GAAA,WACA,OAAAT,EAAApC,KAAA2C,GAAAE,EAAAQ,eAKA,SAAAC,EAAAZ,EAAAC,EAAAS,EAAAR,GACAA,EAAA1I,QAAA,SAAA2I,GACAA,KAAAO,EAAAJ,YACAN,EAAAM,UAAAH,GAAA,WACA,OAAA7C,KAAA2C,GAAAE,GAAAL,MAAAxC,KAAA2C,GAAAU,eAKA,SAAAE,EAAAb,EAAAC,EAAAS,EAAAR,GACAA,EAAA1I,QAAA,SAAA2I,GACAA,KAAAO,EAAAJ,YACAN,EAAAM,UAAAH,GAAA,WACA,OA3CAR,EA2CArC,KAAA2C,IA1CAJ,EAAAH,EAAAC,EA0CAQ,EAAAQ,YAzCAhO,KAAA,SAAAuG,GACA,GAAAA,EACA,OAAA,IAAA4H,EAAA5H,EAAA2G,EAAAP,WAJA,IAAAK,EACAE,MA+CA,SAAAkB,EAAAC,GACA1D,KAAA2D,OAAAD,EAuBA,SAAAF,EAAAI,EAAA5B,GACAhC,KAAA6D,QAAAD,EACA5D,KAAA8D,SAAA9B,EA+BA,SAAA+B,EAAAnE,GACAI,KAAAgE,OAAApE,EAuCA,SAAAqE,EAAAC,GACAlE,KAAAmE,IAAAD,EACAlE,KAAAW,SAAA,IAAA1B,QAAA,SAAAC,EAAAC,GACA+E,EAAAE,WAAA,WACAlF,KAEAgF,EAAA/B,QAAA,WACAhD,EAAA+E,EAAAxO,QAEAwO,EAAAG,QAAA,WACAlF,EAAA+E,EAAAxO,UAkBA,SAAA4O,EAAAjF,EAAAkF,EAAAjF,GACAU,KAAAwE,IAAAnF,EACAW,KAAAuE,WAAAA,EACAvE,KAAAV,YAAA,IAAA2E,EAAA3E,GAkBA,SAAAmF,EAAApF,GACAW,KAAAwE,IAAAnF,EA/IAoD,EAAAgB,EAAA,UACA,OACA,UACA,aACA,WAGAN,EAAAM,EAAA,SAAAiB,UACA,MACA,SACA,SACA,aACA,UAGAnB,EAAAE,EAAA,SAAAiB,UACA,aACA,kBAQAjC,EAAAe,EAAA,WACA,YACA,MACA,aACA,UAGAL,EAAAK,EAAA,UAAAmB,WACA,SACA,YAIA,UAAA,WAAA,sBAAAzK,QAAA,SAAA0K,GACAA,KAAAD,UAAA3B,YACAQ,EAAAR,UAAA4B,GAAA,WACA,IAAAhB,EAAA5D,KACAsC,EAAAe,UACA,OAAApE,QAAAC,UAAA7J,KAAA,WAEA,OADAuO,EAAAC,QAAAe,GAAApC,MAAAoB,EAAAC,QAAAvB,GACAP,EAAA6B,EAAAE,UAAAzO,KAAA,SAAAuG,GACA,GAAAA,EACA,OAAA,IAAA4H,EAAA5H,EAAAgI,EAAAE,kBAUAC,EAAAf,UAAAhE,YAAA,WACA,OAAA,IAAAyE,EAAAzD,KAAAgE,OAAAhF,YAAAwD,MAAAxC,KAAAgE,OAAAX,aAGAU,EAAAf,UAAAU,MAAA,WACA,OAAA,IAAAD,EAAAzD,KAAAgE,OAAAN,MAAAlB,MAAAxC,KAAAgE,OAAAX,aAGAZ,EAAAsB,EAAA,UACA,OACA,UACA,aACA,kBAGAZ,EAAAY,EAAA,SAAAc,gBACA,MACA,MACA,SACA,QACA,MACA,SACA,SACA,aACA,UAGAtB,EAAAQ,EAAA,SAAAc,gBACA,aACA,kBAGAvB,EAAAS,EAAA,SAAAc,gBACA,gBAkBAZ,EAAAjB,UAAAzD,YAAA,WACA,OAAA,IAAAwE,EAAA/D,KAAAmE,IAAA5E,YAAAiD,MAAAxC,KAAAmE,IAAAd,aAGAZ,EAAAwB,EAAA,OACA,mBACA,SAGAX,EAAAW,EAAA,MAAAa,gBACA,UASAR,EAAAtB,UAAAlE,kBAAA,WACA,OAAA,IAAAiF,EAAA/D,KAAAwE,IAAA1F,kBAAA0D,MAAAxC,KAAAwE,IAAAnB,aAGAZ,EAAA6B,EAAA,OACA,OACA,UACA,qBAGAhB,EAAAgB,EAAA,MAAAS,aACA,oBACA,UAOAN,EAAAzB,UAAA1D,YAAA,WACA,OAAA,IAAA2E,EAAAjE,KAAAwE,IAAAlF,YAAAkD,MAAAxC,KAAAwE,IAAAnB,aAGAZ,EAAAgC,EAAA,OACA,OACA,UACA,qBAGAnB,EAAAmB,EAAA,MAAAM,aACA,WAKA,aAAA,iBAAA7K,QAAA,SAAA8K,IACAjB,EAAAN,GAAAvJ,QAAA,SAAAkJ,GAEA4B,KAAA5B,EAAAJ,YAEAI,EAAAJ,UAAAgC,EAAAlH,QAAA,OAAA,YAAA,WACA,IAvPAmH,EAuPA3C,GAvPA2C,EAuPA5B,UAtPA1I,MAAAqI,UAAAkC,MAAAC,KAAAF,IAuPA7N,EAAAkL,EAAAA,EAAAlG,OAAA,GACAgJ,EAAApF,KAAAgE,QAAAhE,KAAA2D,OACA3B,EAAAoD,EAAAJ,GAAAxC,MAAA4C,EAAA9C,EAAA4C,MAAA,GAAA,IACAlD,EAAAC,UAAA,WACA7K,EAAA4K,EAAAE,gBAOAuB,EAAAM,GAAA7J,QAAA,SAAAkJ,GACAA,EAAAJ,UAAAxD,SACA4D,EAAAJ,UAAAxD,OAAA,SAAA6F,EAAAC,GACA,IAAAC,EAAAvF,KACAwF,KAEA,OAAA,IAAAvG,QAAA,SAAAC,GACAqG,EAAAE,cAAAJ,EAAA,SAAAzB,GACAA,GAIA4B,EAAAxE,KAAA4C,EAAAhI,YAEA8J,IAAAJ,GAAAE,EAAApJ,QAAAkJ,EAIA1B,EAAA+B,WAHAzG,EAAAsG,IANAtG,EAAAsG,WAeA,IAAAI,GACAjH,KAAA,SAAAlH,EAAAoO,EAAAC,GACA,IAAAvD,EAAAH,EAAA2D,UAAA,QAAAtO,EAAAoO,IACA7D,EAAAO,EAAAP,QAQA,OANAA,EAAAgE,gBAAA,SAAAnQ,GACAiQ,GACAA,EAAA,IAAAxB,EAAAtC,EAAAE,OAAArM,EAAA0O,WAAAvC,EAAA1C,eAIAiD,EAAAlN,KAAA,SAAAgK,GACA,OAAA,IAAAoF,EAAApF,MAGA4B,OAAA,SAAAxJ,GACA,OAAA2K,EAAA2D,UAAA,kBAAAtO,MAIA,oBAAAwO,QACAA,OAAAC,QAAAN,EACAK,OAAAC,QAAAC,QAAAF,OAAAC,SAGA1P,KAAAkI,IAAAkH,EArTA","file":"restaurant-info.js","sourcesContent":["var restaurant;\nvar map;\nvar connectionChecker;\n\n/**\n * Toggle map visibility\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  const mapbtn = document.getElementById('show-map');\n  const mapbox = document.getElementById('map-container');\n  mapbtn.addEventListener('click', event => {\n    mapbox.classList.toggle('active');\n\n    if (mapbox.classList.contains('active')) {\n      mapbtn.innerHTML = 'Hide the map';\n    } else {\n      mapbtn.innerHTML = 'View results on the map';\n    }\n  });\n});\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL (for Google map).\n */\nfetchRestaurantFromURLForMap = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n  name.setAttribute('aria-label', `${restaurant.name} restaurant`)\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n  address.setAttribute('aria-label', `Address: ${restaurant.address}`)\n\n  if (restaurant.photograph) {\n    const picture = document.getElementById('restaurant-img');\n    const webp1 = document.createElement('source');\n    const webp2 = document.createElement('source');\n    const webp3 = document.createElement('source');\n    const jpg1 = document.createElement('source');\n    const jpg2 = document.createElement('source');\n    const jpg3 = document.createElement('source');\n    const image = document.createElement('img');\n\n    webp1.dataset.srcset = `/img/${restaurant.photograph}-680.webp`;\n    webp1.media = '(min-width: 471px) and (max-width: 760px), (min-width: 941px) and (max-width: 1520px)';\n    webp1.type = 'image/webp';\n    picture.append(webp1);\n\n    webp2.dataset.srcset = `/img/${restaurant.photograph}-390.webp`;\n    webp2.media = '(max-width: 470px), (min-width: 841px) and (max-width: 940px)';\n    webp2.type = 'image/webp';\n    picture.append(webp2);\n\n    webp3.dataset.srcset = `/img/${restaurant.photograph}-original.webp`;\n    webp3.media = '(min-width: 761px) and (max-width: 840px), (min-width: 1521px)';\n    webp3.type = 'image/webp';\n    picture.append(webp3);\n\n    jpg1.dataset.srcset = `/img/${restaurant.photograph}-680.jpg`;\n    jpg1.media = '(min-width: 471px) and (max-width: 760px), (min-width: 941px) and (max-width: 1520px)';\n    jpg1.type = 'image/jpeg';\n    picture.append(jpg1);\n\n    jpg2.dataset.srcset = `/img/${restaurant.photograph}-390.jpg`;\n    jpg2.media = '(max-width: 470px), (min-width: 841px) and (max-width: 940px)';\n    jpg2.type = 'image/jpeg';\n    picture.append(jpg2);\n\n    jpg3.dataset.srcset = `/img/${restaurant.photograph}-original.jpg`;\n    jpg3.media = '(min-width: 761px) and (max-width: 840px), (min-width: 1521px)';\n    jpg3.type = 'image/jpeg';\n    picture.append(jpg3);\n\n    image.src = `/img/${restaurant.photograph}-15.jpg`;\n    image.dataset.src = `/img/${restaurant.photograph}-original.jpg`;\n    image.alt = `${restaurant.name} restaurant's photo`;\n    picture.append(image);\n  }\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  const addToFav = document.getElementById('add-to-fav');\n  if(restaurant.is_favorite === true || restaurant.is_favorite == 'true') {\n    addToFav.setAttribute('aria-checked', 'true');\n    addToFav.title = `Remove ${restaurant.name} from favorites`;\n    addToFav.setAttribute('aria-label', `Remove ${restaurant.name} from favorites`);\n    addToFav.innerHTML = 'Remove from favorites <span>&#x2764;</span>';\n    addToFav.classList.add('active');\n  } else {\n    addToFav.setAttribute('aria-checked', 'false');\n    addToFav.title = `Add ${restaurant.name} to favorites`;\n    addToFav.setAttribute('aria-label', `Add ${restaurant.name} to favorites`);\n    addToFav.innerHTML = 'Add to favorites <span>&#x2764;</span>';\n    addToFav.classList.remove('active');\n  }\n  addToFav.addEventListener('click', event => {\n    let favoriteStat; // Variable for favorite status\n    let alertText;\n\n    if (addToFav.classList.contains('active')) {\n      favoriteStat = true;\n    } else {\n      favoriteStat = false;\n    }\n\n    DBHelper.toggleFavStat(restaurant.id, favoriteStat)\n      .then((data) => {\n        self.restaurant = data;\n\n        if (data.is_favorite === true || data.is_favorite == 'true') {\n          addToFav.setAttribute('aria-checked', 'true');\n          addToFav.title = `Remove ${restaurant.name} from favorites`;\n          addToFav.setAttribute('aria-label', `Remove ${restaurant.name} from favorites`);\n          addToFav.innerHTML = 'Remove from favorites <span>&#x2764;</span>';\n          addToFav.classList.add('active');\n          alertText = `${restaurant.name} has been added to your favorites`;\n        } else {\n          addToFav.setAttribute('aria-checked', 'false');\n          addToFav.title = `Add ${restaurant.name} to favorites`;\n          addToFav.setAttribute('aria-label', `Add ${restaurant.name} to favorites`);\n          addToFav.innerHTML = 'Add to favorites <span>&#x2764;</span>';\n          addToFav.classList.remove('active');\n          alertText = `${restaurant.name} has been removed from your favorites`;\n        }\n\n        dispAlertBlock(alertText, 'success');\n      })\n      .catch((error) => console.error(error));\n  });\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n\n  // Use IntersectionObserver for lazy loading images\n  const images = window.document.querySelectorAll('source, img');\n  const config = {\n    rootMargin: '0px',\n    threshold: 0.1\n  };\n  let observer;\n\n  let preloadImage = (element) => {\n\n    if(element.dataset && element.dataset.src) {\n      element.src = element.dataset.src;\n    }\n\n    if(element.dataset && element.dataset.srcset) {\n      element.srcset = element.dataset.srcset;\n    }\n  }\n\n  let onIntersection = (entries) => {\n    entries.forEach(entry => {\n      if (entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        preloadImage(entry.target);\n      }\n    });\n  }\n\n  if (!('IntersectionObserver' in window)) {\n    Array.from(images).forEach(image => preloadImage(image));\n  } else {\n    observer = new IntersectionObserver(onIntersection, config);\n    images.forEach(image => {\n      observer.observe(image);\n    });\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = () => {\n  const container = document.getElementById('reviews-container');\n  // const title = document.createElement('h2');\n  // title.innerHTML = 'Reviews';\n  // container.appendChild(title);\n\n  DBHelper.fetchReviewsById(getParameterByName('id'))\n    .then(reviews => {\n      if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        return;\n      }\n\n      self.restaurant.reviews = reviews;\n\n      const ul = document.getElementById('reviews-list');\n      reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n      });\n      // container.appendChild(ul);\n\n      // Add data to review form\n      const form = document.getElementById('review-form');\n      const idInput = document.getElementById('restaurant-id');\n      idInput.value = reviews.restaurant_id;\n\n      form.addEventListener('submit', function(event) {\n        event.preventDefault();\n\n        const restID = parseInt(stripTags(document.getElementById('restaurant-id').value));\n        if (isNaN(restID)) {\n          dispAlertBlock('Sorry, the form can not be sent now. Try later.', 'error');\n          return;\n        }\n\n        let name = stripTags(document.getElementById('name').value);\n        if (name.trim().length < 1) {\n          dispAlertBlock('You did not enter your name!', 'error');\n          return;\n        }\n        let radiobox = document.querySelector('input[name=\"rating\"]:checked');\n        let rating = 0;\n        if (radiobox) {\n          rating = parseInt(radiobox.value);\n        }\n        if (rating == 0 || isNaN(rating)) {\n          dispAlertBlock('You did not choose rating!', 'error');\n          return;\n        }\n\n        let comments = stripTags(document.getElementById('comments').value);\n        if (comments.trim().length < 1) {\n          dispAlertBlock('You did not enter your comment!', 'error');\n          return;\n        }\n\n        sendReview(restID, name, rating, comments, ul, form);\n      });\n    })\n    .catch(error => console.error(error));\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.tabindex = 0;\n  const hdr = document.createElement('h3');\n  const name = document.createElement('span');\n  name.className = 'review-name';\n  name.innerHTML = review.name;\n  hdr.appendChild(name);\n\n  const date = document.createElement('span');\n  date.innerHTML = new Date(review.updatedAt).toDateString();\n  date.setAttribute('class', 'review-date');\n  hdr.appendChild(date);\n  li.appendChild(hdr);\n\n  const rating = document.createElement('p');\n  rating.className = 'review-rating';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Send review or save it for later\n*/\nsendReview = (restID, name, rating, comments, ul, form) => {\n  DBHelper.sendReviewToServer(restID, name, rating, comments, self.restaurant.reviews)\n    .then(data => {\n      form.reset();\n      dispAlertBlock('Thank you for your review!', 'success');\n      ul.appendChild(createReviewHTML(data));\n    })\n    .catch(error => {\n      if (navigator.onLine) {\n        dispAlertBlock('Your review could not be sent.', 'error');\n      } else {\n        DBHelper.saveOfflineReviewToIDB(restID, name, rating, comments);\n        dispAlertBlock('You are offline. Your review will be sent when the connection is restored' , 'error');\n\n        connectionChecker = setInterval(() => {\n          checkConnection(restID, ul, form);\n        }, 5000);\n      }\n    });\n}\n\n/**\n * Check connection, if online - send review.\n */\ncheckConnection = (restID, ul, form) => {\n  if (navigator.onLine) {\n    clearInterval(connectionChecker);\n    dispAlertBlock('You are online. We are sending your review now.', 'success');\n\n    DBHelper.sendReviewFromIDB(restID, self.restaurant.reviews)\n      .then(data => {\n        form.reset();\n        dispAlertBlock('Thank you for your review!', 'success');\n        ul.appendChild(createReviewHTML(data));\n      });\n  }\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Show messages.\n */\ndispAlertBlock = (text, alertType = 'success') => {\n  const alertBlock = document.querySelector('.alert');\n  // const alertClose = document.querySelector('.alert__close');\n  alertBlock.innerHTML = text;\n  alertBlock.className = 'alert';\n  alertBlock.classList.add(`alert-${alertType}`);\n  alertBlock.classList.add('active');\n\n  // alertClose.addEventListener('click', event => {\n  //   alertBlock.classList.remove('active');\n  // });\n\n  setTimeout(() => {\n    alertBlock.classList.remove('active');\n  }, 5000);\n}\n\nstripTags = (str) => {\n    let tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi; // Match any html tag\n    let commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi; // Match <!--, -->, <?, <?php and ?>\n    return str.replace(commentsAndPhpTags, '').replace(tags, ''); // Just replace it by an empty string\n}","var IDBPromise; // Variable for IDB promise\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Your server port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Create and/or open IDB.\r\n   */\r\n\r\n  static openDatabase() {\r\n    return idb.open(\"RestReview\", 3, function(upgradeDb) {\r\n      let storeRestaurants = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      let storeReviews = upgradeDb.createObjectStore('reviews', {keyPath: 'restaurant_id'});\r\n      let storeOfflineReviews = upgradeDb.createObjectStore('offlinereviews', {keyPath: 'restaurant_id'});\r\n      storeRestaurants.createIndex('cuisine','cuisine_type');\r\n      storeRestaurants.createIndex('neighborhood','neighborhood');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from IDB.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return new Promise((resolve,reject) => {\r\n      if (!IDBPromise) {\r\n        IDBPromise = DBHelper.openDatabase();\r\n      }\r\n\r\n      IDBPromise.then(db => {\r\n        if (!db) return db;\r\n\r\n        let tx = db.transaction('restaurants');\r\n        let store = tx.objectStore('restaurants');\r\n\r\n        store.getAll().then(data => {\r\n          if (data.length > 0 && !navigator.onLine) {\r\n            resolve(data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              IDBPromise.then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                data.forEach(restaurant => store.put(restaurant));\r\n              });\r\n              return resolve(data);\r\n            })\r\n            .catch(e => requestError(e, 'Restaurants request from web failed'));\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    IDBPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      let tx = db.transaction('restaurants');\r\n      let store = tx.objectStore('restaurants');\r\n\r\n      store.get(parseInt(id))\r\n        .then(data => {\r\n          if (data && data.name.length > 0 && !navigator.onLine) {\r\n            return callback(null, data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants/' + id)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              IDBPromise.then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                store.put(data);\r\n              });\r\n              return callback(null, data);\r\n            })\r\n            .catch(e => callback('Restaurant request from web failed', null));\r\n        })\r\n        .catch(e => callback('Restaurant does not exist', null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurant's reviews.\r\n   */\r\n  static fetchReviewsById(id) {\r\n    return new Promise((resolve, reject) => {\r\n      DBHelper.getReviewsFromCache().then(function(data) {\r\n        if (data.length > 0 && !navigator.onLine) {\r\n          resolve(data[0]);\r\n        }\r\n\r\n        fetch(DBHelper.DATABASE_URL + '/reviews/?restaurant_id=' + id)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            DBHelper.putReviewsToIDB(data);\r\n            resolve(data);\r\n          })\r\n          .catch(error => reject(error));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all restaurant reviews from cache\r\n   */\r\n  static getReviewsFromCache() {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    return IDBPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      var tx = db.transaction('reviews');\r\n      var store = tx.objectStore('reviews');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Put reviews to IDB\r\n   */\r\n  static putReviewsToIDB(reviews) {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    IDBPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      var tx = db.transaction('reviews', 'readwrite');\r\n      var store = tx.objectStore('reviews');\r\n\r\n\r\n      if (reviews.length > 0) {\r\n        reviews.restaurant_id = parseInt(reviews[0].restaurant_id);\r\n        store.put(reviews);\r\n      }\r\n\r\n      return tx.complete;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send request with favorite status to the server\r\n   */\r\n  static toggleFavStat(id, favoriteStat) {\r\n    if (typeof(favoriteStat) == 'string') {\r\n      if (favoriteStat == 'true') {\r\n        favoriteStat = false;\r\n      } else {\r\n        favoriteStat = true;\r\n      }\r\n    } else {\r\n      favoriteStat = !favoriteStat;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' + favoriteStat, {\r\n        method: 'PUT'\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => resolve(data));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send reviews to the server\r\n   */\r\n  static sendReviewToServer(restID, name, rating, comments, reviews) {\r\n    return new Promise((resolve, reject) => {\r\n      console.log(DBHelper.DATABASE_URL + '/reviews/');\r\n\r\n      fetch(DBHelper.DATABASE_URL + '/reviews', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          restaurant_id: restID,\r\n          name: name,\r\n          rating: rating,\r\n          comments: comments\r\n        })\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          reviews.push(data);\r\n          DBHelper.putReviewsToIDB(reviews);\r\n          resolve(data);\r\n        })\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Save user review to IDB\r\n   */\r\n  static saveOfflineReviewToIDB(restID, name, rating, comments) {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    IDBPromise.then(function(db) {\r\n      if (!db) return;\r\n\r\n      var tx = db.transaction('offlinereviews', 'readwrite');\r\n      var store = tx.objectStore('offlinereviews');\r\n\r\n      store.put({\r\n        restaurant_id: restID,\r\n        name: name,\r\n        rating: rating,\r\n        comments: comments\r\n      });\r\n\r\n      return tx.complete;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send user review to the server if he is online.\r\n   */\r\n  static sendReviewFromIDB(restID, reviews) {\r\n    return new Promise((resolve,reject) => {\r\n      if (!IDBPromise) {\r\n        IDBPromise = DBHelper.openDatabase();\r\n      }\r\n\r\n      IDBPromise.then(function(db) {\r\n        if (!db) return;\r\n\r\n        var tx = db.transaction('offlinereviews');\r\n        var store = tx.objectStore('offlinereviews');\r\n\r\n        return store.get(restID);\r\n      })\r\n      .then(function(review) {\r\n        DBHelper.sendReviewToServer(review.restaurant_id, review.name, review.rating, review.comments, reviews)\r\n          .then(data => {\r\n            IDBPromise.then(function(db) {\r\n              var tx = db.transaction('offlinereviews', 'readwrite');\r\n              var store = tx.objectStore('offlinereviews');\r\n\r\n              store.delete(restID);\r\n\r\n              return tx.complete;\r\n            });\r\n            resolve(data);\r\n          })\r\n          .catch(error => reject(error));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = results.map((v, i) => results[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = results.map((v, i) => results[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.photograph) {\r\n      return (`/img/${restaurant.photograph}-original.jpg`);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js', {scope: './'}).then(function(reg) {\r\n    console.log('Registration succeeded. Scope is ' + reg.scope);\r\n  }).catch(function(error) {\r\n    console.log('Registration failed with ' + error);\r\n  });\r\n}","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}