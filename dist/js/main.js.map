{"version":3,"sources":["app.js","dbhelper.js","main.js","idb.js"],"names":["restaurants","neighborhoods","cuisines","map","navigator","serviceWorker","register","scope","then","reg","console","log","catch","error","dbPromise","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","images","querySelectorAll","observer","preloadImage","element","dataset","src","srcset","onIntersection","entries","entry","intersectionRatio","unobserve","target","IntersectionObserver","rootMargin","threshold","image","observe","Array","from","addMarkersToMap","li","setAttribute","photograph","picture","webp1","webp2","jpg1","jpg2","className","media","type","alt","name","tabIndex","address","div","more","href","urlForRestaurant","title","addToFav","marker","mapMarkerForRestaurant","addListener","location","url","push","DATABASE_URL","[object Object]","idb","open","upgradeDb","storeRestaurants","createObjectStore","keyPath","createIndex","callback","Promise","resolve","reject","openDatabase","db","transaction","objectStore","getAll","data","length","fetch","response","json","store","put","e","requestError","id","get","parseInt","fetchRestaurants","results","filter","r","cuisine_type","getReviewsFromCache","onLine","ok","Error","status","putReviewsToIDB","this","reviews","tx","restaurant_id","complete","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","Marker","position","latlng","animation","Animation","DROP","promisifyRequest","request","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","slice","call","nativeObject","query","count","instance","items","iterateCursor","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default"],"mappings":"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","file":"main.js","sourcesContent":["if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js', {scope: './'}).then(function(reg) {\r\n    console.log('Registration succeeded. Scope is ' + reg.scope);\r\n  }).catch(function(error) {\r\n    console.log('Registration failed with ' + error);\r\n  });\r\n}","var dbPromise;\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Your server port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Create and/or open IDB.\r\n   */\r\n\r\n  static openDatabase() {\r\n    return idb.open(\"RestReview\", 2, function(upgradeDb) {\r\n      let storeRestaurants = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      let storeReviews = upgradeDb.createObjectStore('reviews', {keyPath: 'restaurant_id'});\r\n      storeRestaurants.createIndex('cuisine','cuisine_type');\r\n      storeRestaurants.createIndex('neighborhood','neighborhood');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from IDB.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return new Promise((resolve,reject) => {\r\n      DBHelper.openDatabase().then(db => {\r\n        if (!db) return;\r\n\r\n        let tx = db.transaction('restaurants');\r\n        let store = tx.objectStore('restaurants');\r\n\r\n        store.getAll().then(data => {\r\n          if (data && data.length > 0) {\r\n            resolve(data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                data.forEach(restaurant => store.put(restaurant));\r\n              });\r\n              return resolve(data);\r\n            })\r\n            .catch(e => requestError(e, 'Restaurants request from web failed'));\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    DBHelper.openDatabase().then(db => {\r\n      if (!db) return;\r\n\r\n      let tx = db.transaction('restaurants');\r\n      let store = tx.objectStore('restaurants');\r\n\r\n      store.get(parseInt(id))\r\n        .then(data => {\r\n          if (data && data.name.length > 0) {\r\n            return callback(null, data);\r\n          }\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants/' + id)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                store.put(data);\r\n              });\r\n              return callback(null, data);\r\n            })\r\n            .catch(e => callback('Restaurant request from web failed', null));\r\n        })\r\n        .catch(e => callback('Restaurant does not exist', null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurant's reviews.\r\n   */\r\n  static fetchReviewsById(id) {\r\n    return new Promise((resolve, reject) => {\r\n      DBHelper.getReviewsFromCache().then(function(data) {\r\n        if (data.length > 0 && !navigator.onLine){\r\n          resolve(data[0]);\r\n        }\r\n\r\n        fetch(DBHelper.DATABASE_URL + '/reviews/?restaurant_id=' + id)\r\n          .then(response => {\r\n            if (response.ok) {\r\n              return response.json();\r\n            }\r\n            reject(new Error(`Request failed with status code : ${response.status}`));\r\n          })\r\n          .then(data => {\r\n            DBHelper.putReviewsToIDB(data);\r\n            resolve(data);\r\n          })\r\n          .catch(error => reject(error));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show cached reviews stored in IDB\r\n   */\r\n  static getReviewsFromCache() {\r\n    if (!dbPromise) {\r\n      dbPromise = this.openDatabase();\r\n    }\r\n\r\n    return dbPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      var tx = db.transaction('reviews');\r\n      var store = tx.objectStore('reviews');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update a single restaurant's review\r\n   */\r\n  static putReviewsToIDB(reviews) {\r\n    if (!dbPromise) {\r\n      dbPromise = this.openDatabase();\r\n    }\r\n\r\n    dbPromise.then(db => {\r\n      if(!db) return db;\r\n\r\n      var tx = db.transaction('reviews', 'readwrite');\r\n      var store = tx.objectStore('reviews');\r\n\r\n\r\n      if (reviews.length > 0) {\r\n        reviews.restaurant_id = parseInt(reviews[0].restaurant_id);\r\n        store.put(reviews);\r\n      }\r\n\r\n      return tx.complete;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = results.map((v, i) => results[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = results.map((v, i) => results[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.photograph) {\r\n      return (`/img/${restaurant.photograph}-original.jpg`);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","let restaurants,\r\n    neighborhoods,\r\n    cuisines;\r\nvar map;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  // updateRestaurants();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n\r\n  // Use IntersectionObserver for lazy loading images\r\n  const images = window.document.querySelectorAll('source, img');\r\n  const config = {\r\n    rootMargin: '0px',\r\n    threshold: 0.1\r\n  };\r\n  let observer;\r\n\r\n  let preloadImage = (element) => {\r\n\r\n    if(element.dataset && element.dataset.src) {\r\n      element.src = element.dataset.src;\r\n    }\r\n\r\n    if(element.dataset && element.dataset.srcset) {\r\n      element.srcset = element.dataset.srcset;\r\n    }\r\n  }\r\n\r\n  let onIntersection = (entries) => {\r\n    entries.forEach(entry => {\r\n      if (entry.intersectionRatio > 0) {\r\n        observer.unobserve(entry.target);\r\n        preloadImage(entry.target);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!('IntersectionObserver' in window)) {\r\n    Array.from(images).forEach(image => preloadImage(image));\r\n  } else {\r\n    observer = new IntersectionObserver(onIntersection, config);\r\n    images.forEach(image => {\r\n      observer.observe(image);\r\n    });\r\n  }\r\n\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.setAttribute(\"role\" , \"listitem\");\r\n\r\n  if (restaurant.photograph) {\r\n    const picture = document.createElement('picture');\r\n    const webp1 = document.createElement('source');\r\n    const webp2 = document.createElement('source');\r\n    const jpg1 = document.createElement('source');\r\n    const jpg2 = document.createElement('source');\r\n    const image = document.createElement('img');\r\n\r\n    picture.className = 'restaurant-img';\r\n\r\n    webp1.dataset.srcset = `/img/${restaurant.photograph}-680.webp`;\r\n    webp1.media = '(max-width: 540px), (min-width: 2100px)';\r\n    webp1.type = 'image/webp';\r\n    picture.append(webp1);\r\n\r\n    webp2.dataset.srcset = `/img/${restaurant.photograph}-390.webp`;\r\n    webp2.media = '(min-width: 541px) and (max-width: 2099px)';\r\n    webp2.type = 'image/webp';\r\n    picture.append(webp2);\r\n\r\n    jpg1.dataset.srcset = `/img/${restaurant.photograph}-680.jpg`;\r\n    jpg1.media = '(max-width: 540px), (min-width: 2100px)';\r\n    jpg1.type = 'image/jpeg';\r\n    picture.append(jpg1);\r\n\r\n    jpg2.dataset.srcset = `/img/${restaurant.photograph}-390.jpg`;\r\n    jpg2.media = '(min-width: 541px) and (max-width: 2099px)';\r\n    jpg2.type = 'image/jpeg';\r\n    picture.append(jpg2);\r\n\r\n    image.src = `/img/${restaurant.photograph}-15.jpg`;\r\n    image.dataset.src = `/img/${restaurant.photograph}-390.jpg`;\r\n    image.alt = `Photo of ${restaurant.name} restaurant`;\r\n    picture.append(image);\r\n\r\n    li.append(picture);\r\n  }\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  name.tabIndex = 0;\r\n  name.setAttribute('aria-label' , `Restaurant ${restaurant.name} in ${restaurant.neighborhood}`);\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const div = document.createElement('div');\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.title = `View details about ${restaurant.name} restaurant`;\r\n  more.setAttribute('aria-label', `View details about ${restaurant.name} restaurant`);\r\n  div.append(more);\r\n\r\n  const addToFav = document.createElement('button');\r\n  addToFav.title = `Add ${restaurant.name} to favorites`;\r\n  addToFav.setAttribute('aria-label', `Add ${restaurant.name} to favorites`);\r\n  addToFav.innerHTML = '&#x2764;';\r\n  addToFav.addEventListener('click', event => {\r\n    console.log('Click on addToFav');\r\n  });\r\n  div.append(addToFav);\r\n  li.append(div);\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}