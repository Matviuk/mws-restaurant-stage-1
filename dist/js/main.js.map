{"version":3,"sources":["app.js","main.js","dbhelper.js","idb.js"],"names":["restaurants","neighborhoods","cuisines","map","navigator","serviceWorker","register","scope","then","reg","console","log","catch","error","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","images","querySelectorAll","observer","preloadImage","element","dataset","src","srcset","onIntersection","entries","entry","intersectionRatio","unobserve","target","IntersectionObserver","rootMargin","threshold","image","observe","Array","from","addMarkersToMap","li","setAttribute","photograph","picture","webp1","webp2","jpg1","jpg2","className","media","type","alt","name","tabIndex","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push","DATABASE_URL","[object Object]","idb","open","upgradeDb","store","createObjectStore","keyPath","createIndex","callback","Promise","resolve","reject","openDatabase","db","transaction","objectStore","getAll","data","length","fetch","response","json","put","e","requestError","id","get","parseInt","fetchRestaurants","results","filter","r","cuisine_type","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","Marker","position","latlng","title","animation","Animation","DROP","promisifyRequest","request","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","slice","call","nativeObject","query","count","instance","items","iterateCursor","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default"],"mappings":"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","file":"main.js","sourcesContent":["if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js', {scope: './'}).then(function(reg) {\r\n    console.log('Registration succeeded. Scope is ' + reg.scope);\r\n  }).catch(function(error) {\r\n    console.log('Registration failed with ' + error);\r\n  });\r\n}","let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar map;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  // updateRestaurants();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n\r\n  // Use IntersectionObserver for lazy loading images\r\n  const images = window.document.querySelectorAll('source, img');\r\n  const config = {\r\n    rootMargin: '0px',\r\n    threshold: 0.1\r\n  };\r\n  let observer;\r\n\r\n  let preloadImage = (element) => {\r\n\r\n    if(element.dataset && element.dataset.src) {\r\n      element.src = element.dataset.src;\r\n    }\r\n\r\n    if(element.dataset && element.dataset.srcset) {\r\n      element.srcset = element.dataset.srcset\r\n    }\r\n  }\r\n\r\n  let onIntersection = (entries) => {\r\n    entries.forEach(entry => {\r\n      if (entry.intersectionRatio > 0) {\r\n        observer.unobserve(entry.target);\r\n        preloadImage(entry.target);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!('IntersectionObserver' in window)) {\r\n    Array.from(images).forEach(image => preloadImage(image));\r\n  } else {\r\n    observer = new IntersectionObserver(onIntersection, config);\r\n    images.forEach(image => {\r\n      observer.observe(image);\r\n    });\r\n  }\r\n\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.setAttribute(\"role\" , \"listitem\");\r\n\r\n  if (restaurant.photograph) {\r\n    const picture = document.createElement('picture');\r\n    const webp1 = document.createElement('source');\r\n    const webp2 = document.createElement('source');\r\n    const jpg1 = document.createElement('source');\r\n    const jpg2 = document.createElement('source');\r\n    const image = document.createElement('img');\r\n\r\n    picture.className = 'restaurant-img';\r\n    // image.className = 'restaurant-img';\r\n\r\n    // webp1.setAttribute('data-srcset', `/img/${restaurant.photograph}-680.webp`);\r\n    // webp1.setAttribute('media', '(max-width: 540px), (min-width: 2100px)');\r\n    // webp1.setAttribute('type', 'image/webp');\r\n    webp1.dataset.srcset = `/img/${restaurant.photograph}-680.webp`;\r\n    webp1.media = '(max-width: 540px), (min-width: 2100px)';\r\n    webp1.type = 'image/webp';\r\n    picture.append(webp1);\r\n\r\n    // webp2.setAttribute('data-srcset', `/img/${restaurant.photograph}-390.webp`);\r\n    // webp2.setAttribute('media', '(min-width: 541px) and (max-width: 2099px)');\r\n    // webp2.setAttribute('type', 'image/webp');\r\n    webp2.dataset.srcset = `/img/${restaurant.photograph}-390.webp`;\r\n    webp2.media = '(min-width: 541px) and (max-width: 2099px)';\r\n    webp2.type = 'image/webp';\r\n    picture.append(webp2);\r\n\r\n    // jpg1.setAttribute('data-srcset', `/img/${restaurant.photograph}-680.jpg`);\r\n    // jpg1.setAttribute('media', '(max-width: 540px), (min-width: 2100px)');\r\n    // jpg1.setAttribute('type', 'image/jpeg');\r\n    jpg1.dataset.srcset = `/img/${restaurant.photograph}-680.jpg`;\r\n    jpg1.media = '(max-width: 540px), (min-width: 2100px)';\r\n    jpg1.type = 'image/jpeg';\r\n    picture.append(jpg1);\r\n\r\n    // jpg2.setAttribute('data-srcset', `/img/${restaurant.photograph}-390.jpg`);\r\n    // jpg2.setAttribute('media', '(min-width: 541px) and (max-width: 2099px)');\r\n    // jpg2.setAttribute('type', 'image/jpeg');\r\n    jpg2.dataset.srcset = `/img/${restaurant.photograph}-390.jpg`;\r\n    jpg2.media = '(min-width: 541px) and (max-width: 2099px)';\r\n    jpg2.type = 'image/jpeg';\r\n    picture.append(jpg2);\r\n\r\n    image.src = `/img/${restaurant.photograph}-15.jpg`;\r\n    // image.setAttribute('data-src', `/img/${restaurant.photograph}-390.jpg`);\r\n    // image.setAttribute('alt', `Photo of ${restaurant.name} restaurant`);\r\n    image.dataset.src = `/img/${restaurant.photograph}-390.jpg`;\r\n    image.alt = `Photo of ${restaurant.name} restaurant`;\r\n    picture.append(image);\r\n\r\n    li.append(picture);\r\n    // li.append(image);\r\n  }\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  name.tabIndex = 0;\r\n  name.setAttribute('aria-label' , `Restaurant ${restaurant.name} in ${restaurant.neighborhood}`);\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('title', `View details about ${restaurant.name} restaurant`);\r\n  more.setAttribute('aria-label', `View details about ${restaurant.name} restaurant`);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Create and/or open IDB.\r\n   */\r\n\r\n  static openDatabase() {\r\n    return idb.open(\"RestReview\", 1, function(upgradeDb) {\r\n      let store = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      store.createIndex('cuisine','cuisine_type');\r\n      store.createIndex('neighborhood','neighborhood');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from IDB.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return new Promise((resolve,reject) => {\r\n      DBHelper.openDatabase().then(db => {\r\n        if (!db) return;\r\n\r\n        let tx = db.transaction('restaurants');\r\n        let store = tx.objectStore('restaurants');\r\n\r\n        store.getAll().then(data => {\r\n          if (data && data.length > 0) {\r\n            resolve(data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                data.forEach(restaurant => store.put(restaurant));\r\n              });\r\n              return resolve(data);\r\n            })\r\n            .catch(e => requestError(e, 'Restaurants request from web failed'));\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    DBHelper.openDatabase().then(db => {\r\n      if (!db) return;\r\n\r\n      let tx = db.transaction('restaurants');\r\n      let store = tx.objectStore('restaurants');\r\n\r\n      store.get(parseInt(id))\r\n        .then(data => {\r\n          if (data && data.name.length > 0) {\r\n            return callback(null, data);\r\n          }\r\n          fetch(DBHelper.DATABASE_URL + '/' + id)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              DBHelper.openDatabase().then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                store.put(data);\r\n              });\r\n              return callback(null, data);\r\n            })\r\n            .catch(e => callback('Restaurant request from web failed', null));\r\n        })\r\n        .catch(e => callback('Restaurant does not exist', null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = results.map((v, i) => results[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = results.map((v, i) => results[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.photograph) {\r\n      return (`/img/${restaurant.photograph}-original.jpg`);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}