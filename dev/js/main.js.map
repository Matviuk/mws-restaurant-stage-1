{"version":3,"sources":["app.js","main.js","dbhelper.js","idb.js"],"names":[],"mappingslrfile":"main.js","sourcesContent":["if (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register('/sw.js', {scope: './'}).then(function(reg) {\r\n    console.log('Registration succeeded. Scope is ' + reg.scope);\r\n  }).catch(function(error) {\r\n    console.log('Registration failed with ' + error);\r\n  });\r\n}","let restaurants,\r\n    neighborhoods,\r\n    cuisines;\r\nvar map;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  updateRestaurants();\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n\r\n  const mapbtn = document.getElementById('show-map');\r\n  const mapbox = document.getElementById('map-container');\r\n  mapbtn.addEventListener('click', event => {\r\n    mapbox.classList.toggle('active');\r\n\r\n    if (mapbox.classList.contains('active')) {\r\n      mapbtn.innerHTML = 'Hide the map';\r\n    } else {\r\n      mapbtn.innerHTML = 'View results on the map';\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n\r\n  // Use IntersectionObserver for lazy loading images\r\n  const images = window.document.querySelectorAll('source, img');\r\n  const config = {\r\n    rootMargin: '0px',\r\n    threshold: 0.1\r\n  };\r\n  let observer;\r\n\r\n  let preloadImage = (element) => {\r\n\r\n    if(element.dataset && element.dataset.src) {\r\n      element.src = element.dataset.src;\r\n    }\r\n\r\n    if(element.dataset && element.dataset.srcset) {\r\n      element.srcset = element.dataset.srcset;\r\n    }\r\n  }\r\n\r\n  let onIntersection = (entries) => {\r\n    entries.forEach(entry => {\r\n      if (entry.intersectionRatio > 0) {\r\n        observer.unobserve(entry.target);\r\n        preloadImage(entry.target);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!('IntersectionObserver' in window)) {\r\n    Array.from(images).forEach(image => preloadImage(image));\r\n  } else {\r\n    observer = new IntersectionObserver(onIntersection, config);\r\n    images.forEach(image => {\r\n      observer.observe(image);\r\n    });\r\n  }\r\n\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.setAttribute(\"role\" , \"listitem\");\r\n\r\n  if (restaurant.photograph) {\r\n    const picture = document.createElement('picture');\r\n    const webp1 = document.createElement('source');\r\n    const webp2 = document.createElement('source');\r\n    const jpg1 = document.createElement('source');\r\n    const jpg2 = document.createElement('source');\r\n    const image = document.createElement('img');\r\n\r\n    picture.className = 'restaurant-img';\r\n\r\n    webp1.dataset.srcset = `/img/${restaurant.photograph}-680.webp`;\r\n    webp1.media = '(max-width: 540px), (min-width: 2100px)';\r\n    webp1.type = 'image/webp';\r\n    picture.append(webp1);\r\n\r\n    webp2.dataset.srcset = `/img/${restaurant.photograph}-390.webp`;\r\n    webp2.media = '(min-width: 541px) and (max-width: 2099px)';\r\n    webp2.type = 'image/webp';\r\n    picture.append(webp2);\r\n\r\n    jpg1.dataset.srcset = `/img/${restaurant.photograph}-680.jpg`;\r\n    jpg1.media = '(max-width: 540px), (min-width: 2100px)';\r\n    jpg1.type = 'image/jpeg';\r\n    picture.append(jpg1);\r\n\r\n    jpg2.dataset.srcset = `/img/${restaurant.photograph}-390.jpg`;\r\n    jpg2.media = '(min-width: 541px) and (max-width: 2099px)';\r\n    jpg2.type = 'image/jpeg';\r\n    picture.append(jpg2);\r\n\r\n    image.src = `/img/${restaurant.photograph}-15.jpg`;\r\n    image.dataset.src = `/img/${restaurant.photograph}-390.jpg`;\r\n    image.alt = `Photo of ${restaurant.name} restaurant`;\r\n    picture.append(image);\r\n\r\n    li.append(picture);\r\n  }\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  name.tabIndex = 0;\r\n  name.setAttribute('aria-label' , `Restaurant ${restaurant.name} in ${restaurant.neighborhood}`);\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const div = document.createElement('div');\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.title = `View details about ${restaurant.name} restaurant`;\r\n  more.setAttribute('aria-label', `View details about ${restaurant.name} restaurant`);\r\n  div.append(more);\r\n\r\n  const addToFav = document.createElement('button');\r\n  addToFav.setAttribute('role', 'switch');\r\n  addToFav.innerHTML = '&#x2764;';\r\n  if (restaurant.is_favorite === true || restaurant.is_favorite == 'true') {\r\n    addToFav.setAttribute('aria-checked', 'true');\r\n    addToFav.title = `Remove ${restaurant.name} from favorites`;\r\n    addToFav.setAttribute('aria-label', `Remove ${restaurant.name} from favorites`);\r\n    addToFav.classList.add('active');\r\n  } else {\r\n    addToFav.setAttribute('aria-checked', 'false');\r\n    addToFav.title = `Add ${restaurant.name} to favorites`;\r\n    addToFav.setAttribute('aria-label', `Add ${restaurant.name} to favorites`);\r\n    addToFav.classList.remove('active');\r\n  }\r\n\r\n  addToFav.addEventListener('click', event => {\r\n    let favoriteStat; // Variable for favorite status\r\n    let alertText;\r\n\r\n    if (addToFav.classList.contains('active')) {\r\n      favoriteStat = true;\r\n    } else {\r\n      favoriteStat = false;\r\n    }\r\n\r\n    console.log('Click on addToFav: ', favoriteStat);\r\n\r\n    DBHelper.toggleFavStat(restaurant.id, favoriteStat)\r\n      .then((data) => {\r\n        self.restaurants[data.id - 1] = data;\r\n        console.log(data.is_favorite);\r\n        if (data.is_favorite === true || data.is_favorite == 'true') {\r\n          addToFav.setAttribute('aria-checked', 'true');\r\n          addToFav.title = `Remove ${data.name} from favorites`;\r\n          addToFav.setAttribute('aria-label', `Remove ${data.name} from favorites`);\r\n          addToFav.classList.add('active');\r\n          alertText = `${data.name} has been added to your favorites`;\r\n        } else {\r\n          addToFav.setAttribute('aria-checked', 'false');\r\n          addToFav.title = `Add ${data.name} to favorites`;\r\n          addToFav.setAttribute('aria-label', `Add ${data.name} to favorites`);\r\n          addToFav.classList.remove('active');\r\n          alertText = `${data.name} has been removed from your favorites`;\r\n        }\r\n\r\n        dispAlertBlock(alertText, 'success');\r\n      })\r\n      .catch((error) => console.error(error));\r\n  });\r\n\r\n  div.append(addToFav);\r\n  li.append(div);\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n\r\n/**\r\n * Show messages.\r\n */\r\ndispAlertBlock = (text, alertType = 'success') => {\r\n  const alertBlock = document.querySelector('.alert');\r\n  // const alertClose = document.querySelector('.alert__close');\r\n  alertBlock.innerHTML = text;\r\n  alertBlock.classList.add(`alert-${alertType}`);\r\n  alertBlock.classList.add('active');\r\n\r\n  // alertClose.addEventListener('click', event => {\r\n  //   alertBlock.classList.remove('active');\r\n  // });\r\n\r\n  setTimeout(() => {\r\n    alertBlock.classList.remove('active');\r\n  }, 5000);\r\n}","var IDBPromise; // Variable for IDB promise\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Your server port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Create and/or open IDB.\r\n   */\r\n\r\n  static openDatabase() {\r\n    return idb.open(\"RestReview\", 3, function(upgradeDb) {\r\n      let storeRestaurants = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      let storeReviews = upgradeDb.createObjectStore('reviews', {keyPath: 'restaurant_id'});\r\n      let storeOfflineReviews = upgradeDb.createObjectStore('offlinereviews', {keyPath: 'restaurant_id'});\r\n      storeRestaurants.createIndex('cuisine','cuisine_type');\r\n      storeRestaurants.createIndex('neighborhood','neighborhood');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants from IDB.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return new Promise((resolve,reject) => {\r\n      if (!IDBPromise) {\r\n        IDBPromise = DBHelper.openDatabase();\r\n      }\r\n\r\n      IDBPromise.then(db => {\r\n        if (!db) return db;\r\n\r\n        let tx = db.transaction('restaurants');\r\n        let store = tx.objectStore('restaurants');\r\n\r\n        store.getAll().then(data => {\r\n          if (data.length > 0 && !navigator.onLine) {\r\n            resolve(data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              IDBPromise.then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                data.forEach(restaurant => store.put(restaurant));\r\n              });\r\n              return resolve(data);\r\n            })\r\n            .catch(e => requestError(e, 'Restaurants request from web failed'));\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    IDBPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      let tx = db.transaction('restaurants');\r\n      let store = tx.objectStore('restaurants');\r\n\r\n      store.get(parseInt(id))\r\n        .then(data => {\r\n          if (data && data.name.length > 0 && !navigator.onLine) {\r\n            return callback(null, data);\r\n          }\r\n\r\n          fetch(DBHelper.DATABASE_URL + '/restaurants/' + id)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              IDBPromise.then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n\r\n                store.put(data);\r\n              });\r\n              return callback(null, data);\r\n            })\r\n            .catch(e => callback('Restaurant request from web failed', null));\r\n        })\r\n        .catch(e => callback('Restaurant does not exist', null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurant's reviews.\r\n   */\r\n  static fetchReviewsById(id) {\r\n    return new Promise((resolve, reject) => {\r\n      DBHelper.getReviewsFromCache().then(function(data) {\r\n        if (data.length > 0 && !navigator.onLine) {\r\n          resolve(data[0]);\r\n        }\r\n\r\n        fetch(DBHelper.DATABASE_URL + '/reviews/?restaurant_id=' + id)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            DBHelper.putReviewsToIDB(data);\r\n            resolve(data);\r\n          })\r\n          .catch(error => reject(error));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all restaurant reviews from cache\r\n   */\r\n  static getReviewsFromCache() {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    return IDBPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      var tx = db.transaction('reviews');\r\n      var store = tx.objectStore('reviews');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Put reviews to IDB\r\n   */\r\n  static putReviewsToIDB(reviews) {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    IDBPromise.then(db => {\r\n      if (!db) return db;\r\n\r\n      var tx = db.transaction('reviews', 'readwrite');\r\n      var store = tx.objectStore('reviews');\r\n\r\n\r\n      if (reviews.length > 0) {\r\n        reviews.restaurant_id = parseInt(reviews[0].restaurant_id);\r\n        store.put(reviews);\r\n      }\r\n\r\n      return tx.complete;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send request with favorite status to the server\r\n   */\r\n  static toggleFavStat(id, favoriteStat) {\r\n    if (typeof(favoriteStat) == 'string') {\r\n      if (favoriteStat == 'true') {\r\n        favoriteStat = false;\r\n      } else {\r\n        favoriteStat = true;\r\n      }\r\n    } else {\r\n      favoriteStat = !favoriteStat;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' + favoriteStat, {\r\n        method: 'PUT'\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => resolve(data));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send reviews to the server\r\n   */\r\n  static sendReviewToServer(restID, name, rating, comments, reviews) {\r\n    return new Promise((resolve, reject) => {\r\n      console.log(DBHelper.DATABASE_URL + '/reviews/');\r\n\r\n      fetch(DBHelper.DATABASE_URL + '/reviews', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          restaurant_id: restID,\r\n          name: name,\r\n          rating: rating,\r\n          comments: comments\r\n        })\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          reviews.push(data);\r\n          DBHelper.putReviewsToIDB(reviews);\r\n          resolve(data);\r\n        })\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Save user review to IDB\r\n   */\r\n  static saveOfflineReviewToIDB(restID, name, rating, comments) {\r\n    if (!IDBPromise) {\r\n      IDBPromise = this.openDatabase();\r\n    }\r\n\r\n    IDBPromise.then(function(db) {\r\n      if (!db) return;\r\n\r\n      var tx = db.transaction('offlinereviews', 'readwrite');\r\n      var store = tx.objectStore('offlinereviews');\r\n\r\n      store.put({\r\n        restaurant_id: restID,\r\n        name: name,\r\n        rating: rating,\r\n        comments: comments\r\n      });\r\n\r\n      return tx.complete;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Send user review to the server if he is online.\r\n   */\r\n  static sendReviewFromIDB(restID, reviews) {\r\n    return new Promise((resolve,reject) => {\r\n      if (!IDBPromise) {\r\n        IDBPromise = DBHelper.openDatabase();\r\n      }\r\n\r\n      IDBPromise.then(function(db) {\r\n        if (!db) return;\r\n\r\n        var tx = db.transaction('offlinereviews');\r\n        var store = tx.objectStore('offlinereviews');\r\n\r\n        return store.get(restID);\r\n      })\r\n      .then(function(review) {\r\n        DBHelper.sendReviewToServer(review.restaurant_id, review.name, review.rating, review.comments, reviews)\r\n          .then(data => {\r\n            IDBPromise.then(function(db) {\r\n              var tx = db.transaction('offlinereviews', 'readwrite');\r\n              var store = tx.objectStore('offlinereviews');\r\n\r\n              store.delete(restID);\r\n\r\n              return tx.complete;\r\n            });\r\n            resolve(data);\r\n          })\r\n          .catch(error => reject(error));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = results.map((v, i) => results[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants().then(results => {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = results.map((v, i) => results[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n    }).catch(e => callback(e, null));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.photograph) {\r\n      return (`/img/${restaurant.photograph}-original.jpg`);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}